## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Translate execution trees into corresponding C code.
##

import core.LangNode :: *;

import CodeGen :: *;
import VarCalc :: get_varRefs;

import ./vars :: localVarDecl, localVarName;


##
## Private Definitions
##

## Map from `box` symbols to class references.
def BOX_CLASSES = @{
    cell:    CodeString.new("Cell"),
    lazy:    CodeString.new("Lazy"),
    promise: CodeString.new("Promise"),
    result:  CodeString.new("Result")
};

## Wrap the given expression in a "non-void" guarantee call.
fn nonVoid(value) {
    return Call.new("datNonVoid", value)
};


##
## Exported Definitions
##

## Translates a node, using and updating `varsBox` as appropriate.
export fn translate(node, varsBox) {
    return switch (node.name) {
        @apply: {
            def target = translate(node::target, varsBox);
            def name = translate(node::name, varsBox);
            def values = node::values;

            if (values.hasName(@maybe)) {
                def vTrans = translate(values::value, varsBox);
                Call.new("methApply", target, name, vTrans)
            } else if (values.hasName(@void)) {
                ## A void `values` binding just devolves into a no-argument
                ## (but otherwise regular) method call.
                MethCall.new(target, name)
            } else {
                ## If it's not wrapped in a `@maybe`, we need to guarantee
                ## non-void.
                def vTrans = nonVoid(translate(values, varsBox));
                Call.new("methApply", target, name, vTrans)
            }
        };

        @call: {
            def target = translate(node::target, varsBox);
            def name = translate(node::name, varsBox);
            def values = [ a in node::values ->
                nonVoid(translate(a, varsBox))
            ];
            MethCall.new(target, name, values*)
        };

        @closureRef: {
            ## This passes each of the `varRefs` as an argument to the
            ## closure maker.
            def vars = varsBox*;
            Call.new("makeClosure_\(node::id)",
                [ name in get_varRefs(node) ->
                    vars[name]::name
                        | die("Capture of undefined variable: \%q(name)");
                ]*)
        };

        @fetch: {
            def target = nonVoid(translate(node::target, varsBox));
            MethCall.new(target, "SYM(fetch)")
        };

        @literalRef: {
            CodeString.new("LIT_\(node::id)")
        };

        @noYield: {
            def value = translate(node::value, varsBox);
            Call.new("mustNotYield", value)
        };

        @store: {
            def target = translate(node::target, varsBox);
            def value = node::value;

            if (value.hasName(@maybe)) {
                def vTrans = translate(value::value, varsBox);
                Call.new("cm_store", target, vTrans)
            } else if (value.hasName(@void)) {
                Call.new("cm_store", target, "NULL")
            } else {
                ## If it's not wrapped in a `@maybe`, we need to guarantee
                ## non-void.
                def vTrans = nonVoid(translate(value, varsBox));
                Call.new("cm_store", target, vTrans)
            }
        };

        @varDef: {
            def cls = BOX_CLASSES[node::box];
            def name = node::name;
            def value = node::value;
            def vars = varsBox*;

            if ((def found = vars[name]) & (found::kind != "free")) {
                die("Cannot redefine local variable: \%q(name).")
            };

            def boxValue = if (value.hasName(@maybe)) {
                def vTrans = translate(value::value, varsBox);
                Call.new("cm_newBox", cls, vTrans)
            } else if (value.hasName(@void)) {
                Call.new("cm_newBox", cls, "NULL");
            } else {
                ## If it's not wrapped in a `@maybe`, we need to guarantee
                ## non-void.
                def vTrans = nonVoid(translate(value, varsBox));
                Call.new("cm_newBox", cls, vTrans)
            };

            def index = #vars;
            def decl = localVarDecl(name, index);
            def binding = @{name: localVarName(name, index), kind: "local"};

            varsBox* := @{vars*, (name): binding};
            return Comment.new("\%q(name)", Assign.new(decl, boxValue));
        };

        @varRef: {
            def name = node::name;
            def vars = varsBox*;
            def binding = vars[name]
                | die("Reference of undefined variable: \%q(node::name)");
            binding::name
        };

        ## Various untranslatable nodes. Details:
        ## * `@closure` --  Should have been replaced by a `closureRef`.
        ## * `@export*`, `@import*` -- Only needed once we move to a
        ##   non-dynamic translation of imports.
        ## * `@maybe`, `@void` -- Should have been handled as special cases
        ##   within the node types where they're explicitly valid.
        @closure:
        @export:
        @exportSelection:
        @importModule:
        @importModuleSelection:
        @importResource:
        @maybe:
        @void: {
            die("Cannot translate: \%q(node).")
        }
    }
};


## Translates the given node as a statement. This differs from plain
## `translate` in that nodes that can't possibly have a side effect are
## dropped (returning void).
export fn translateStatement(node, varsBox) {
    return? switch (node.name) {
        @closureRef:
        @literalRef: {
            ## Return void.
        };

        default: {
            translate(node, varsBox)
        }
    }
};
