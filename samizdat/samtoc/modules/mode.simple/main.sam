## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Compilation mode "simple" which does the simplest possible conversion of
## source into C code that *does not* rely on an interpreter when run.
##

import core.Io0;
import core.LangNode :: *;

import CodeGen :: *;
import DataCode;
import Reader;
import Template;
import VarCalc :: get_varRefs;

import ./collectClosures :: collectClosures;
import ./internLiterals :: internLiterals;
import ./translate :: translate, translateStatement;
import ./vars;
import ./Interner :: *;

import @utf8 ./template.txt;


##
## Private Definitions
##

## Indent with the usual width column limit.
fn usualIndent(tree, depth) {
    return tree.indent(depth, 78)
};

## Returns a `makeClosure_*` declaration, as a code tree.
fn closureDeclaration(cloIdx, clo, literals) {
    def varRefs = get_varRefs(clo);
    def decl = Call.new(
        "static zvalue makeClosure_\(cloIdx)",
        [ idx in (0..), name in varRefs ->
            Comment.new(
                "\%q(name)",
                $vars::freeVarDecl(name, idx))
        ]*);

    return if (def ref = clo::name) {
        Comment.new("\%q(literals[ref::id])", decl)
    } else {
        decl
    }
};

## Returns a full `makeClosure_*` definition, as a string.
fn closureMaker(cloIdx, clo, literals) {
    def name = (def n = clo::name)
        & translate(n, nullBox).flatten()
        | "NULL";

    def varRefs = get_varRefs(clo);
    def decl = closureDeclaration(cloIdx, clo, literals);
    def stateAssigns = [ idx in (0..), name in varRefs ->
        def varName = $vars::freeVarName(name, idx);
        def stat = Statement.new(
            Assign.new("state[\(idx)]", varName));
        usualIndent(stat, 1)
    ];
    def maxArgs = formalsMaxArgs(clo::formals);
    def minArgs = formalsMinArgs(clo::formals);
    def resultAssign = Assign.new(
        "zvalue result",
        Call.new(
            "makeBuiltin", "\(minArgs)", "\(maxArgs)",
            "FUN_IMPL_NAME(\(cloIdx))", "\(#varRefs)", name));

    return "\
    \/\(usualIndent(decl, 0)) {
    \/\(usualIndent(resultAssign, 1));
    \/  zvalue *state = builtinGetState(result).arr;
    \/\(stateAssigns)
    \/  return result;
    \/}\n\n"
};

## Returns the statements needed to return the given `yield` value, first
## performing any given `cleanups`.
fn makeYieldStatements(yieldValue, cleanups) {
    return if (yieldValue \== "NULL") {
        [cleanups*, Return.new(yieldValue)]
    } else if (cleanups == []) {
        [Return.new(yieldValue)]
    } else {
        [
            Assign.new("zvalue result", yieldValue),
            cleanups*,
            Return.new("result")
        ]
    }
};

## Returns a function definition for the code for a closure, as a string.
fn closureBody(cloIdx, clo, literals) {
    ## Set up the initial variable bindings.
    def varInfo = $vars::processVars(clo);
    var vars = varInfo::vars;
    def varNames = varInfo::names;

    ## Translate the statements and the yield. Note that the `mainStats`
    ## definition is a list constructor (not a generator), as its body has
    ## to run before `yield` is calculated (in order to have the correct
    ## set of vars defined in `vars`).

    def mainStats =
        [ s in clo::statements -> translateStatement(s, vars?) ];

    def rawYield = clo::yield;
    def yieldNode = if (rawYield.hasName(@maybe)) {
        translate(rawYield::value, vars?);
    } else if (rawYield.hasName(@void)) {
        "NULL"
    } else {
        ## If it's not wrapped in a `@maybe`, we need to guarantee
        ## non-void.
        Call.new("datNonVoid", translate(rawYield, vars?))
    };
    def yieldStats = makeYieldStatements(yieldNode, varInfo::cleanups);

    ## Process all the statements, producing source code.

    def allStats = [ s in [varInfo::inits*, mainStats*, yieldStats*] ->
        "\(usualIndent(Statement.new(s), 1))\n"
    ];

    def nameLine = (def ref = clo::name)
        & "/* \%q(literals[ref::id]) */\n"
        | "";

    return "\
    \/\(nameLine)\
    \/static FUN_IMPL_DECL(\(cloIdx)) {
    \/  zvalue *state = builtinGetState(thisFunction).arr;
    \/\(allStats)}\n\n"
};

## Constructs the top-level closure. This is similar to translating a
## `@closureRef` node, except that the closure state is initialized from
## the global environment and not from local or captured variables.
fn mainClosureMaker(node, interner) {
    def varRefs = get_varRefs(node);
    def ids = [ name in varRefs -> interner.intern(name) ];

    def stat = Statement.new(
        Return.new(
            Call.new("makeClosure_\(node::id)",
                ( name in varRefs, id in ids ->
                    Comment.new("\%q(name)",
                        MethCall.new("CLS_Result", "SYM(new)",
                            Call.new("cm_get", "GLOBALS", "LIT_\(id)")))
                )*)));

    return usualIndent(stat, 1)
};


##
## Exported Definitions
##

## Compiles a single file.
export fn compile(resolver, sourcePath, targetPath) {
    fn resolveFn(source) {
        return resolver.resolve(source)
    };

    ## Note: The node resulting from a call to `readProgram` is always a
    ## `@closure`.
    def sourceTree = $Reader::readProgram(sourcePath, resolveFn);
    def mainNode = withDynamicImports(sourceTree);

    def interner = Interner.new();
    def litsNode = internLiterals(mainNode, interner);
    def partialLits = interner.interns;  ## For closure declarations.

    def closuresNode = collectClosures(litsNode);
    def closures = closuresNode::closures;
    def closureDeclarations = "".cat(
        [ idx in (0..), clo in closures ->
            def stat = Statement.new(
                closureDeclaration(idx, clo, partialLits));
            "\(usualIndent(stat, 0))\n"
        ]*);
    def closureMakers = "".cat(
        [ idx in (0..), clo in closures ->
            closureMaker(idx, clo, partialLits)
        ]*);
    def closureBodies = "".cat(
        [ idx in (0..), clo in closures ->
            closureBody(idx, clo, partialLits)
        ]*);
    def mainClosure = mainClosureMaker(closuresNode::node, interner);

    def literals = interner.interns;
    def literalDeclarations = "".cat(
        [ index in (0..!#literals) ->
            "static zvalue LIT_\(index) = NULL;\n"
        ]*);
    def literalInits = "".cat(
        [ index in (0..), lit in literals ->
            def init = Statement.new(
                Call.new("datImmortalize",
                    Assign.new("LIT_\(index)", $DataCode::convert(lit))));
            "\(usualIndent(init, 2))\n"
        ]*);

    def replacements = {
        closureBodies,
        closureDeclarations,
        closureMakers,
        literalDeclarations,
        literalInits,
        mainClosure
    };

    def outputText = $Template::apply($template, replacements);

    $Io0::writeFileUtf8(targetPath, outputText)
};

export def SUFFIX = "c";
