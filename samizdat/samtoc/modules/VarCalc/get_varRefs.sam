## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

import core.LangNode :: *;

import ./get_varDefs :: get_varDefs;

##
## Private Definitions
##

## Extracts and combines the `varRefs` of all the arguments.
fn catVarRefs(nodes*) {
    return [].cat([ n in nodes -> get_varRefs(n) ]*)
};


##
## Exported Definitions
##

## `node.get_varRefs()`: Method that returns free variable references of
## `node`, as list of names.
export fn get_varRefs(node) {
    return switch (node.name) {
        @apply: {
            catVarRefs(node::target, node::name, node::values)
        };

        @call: {
            catVarRefs(node::target, node::name, node::values*)
        };

        @closure: {
            if (def refs = node::varRefs) {
                ## Already calculated for this node.
                return refs
            };

            ## `baseLocals` is the list of all local variables defined at
            ## the top of the closure, including formal arguments and a
            ## yield def (if any).
            def baseLocals = [
                node::yieldDef?*,
                [ f in node::formals -> f::name ]*];

            ## The extra element at the end is to represent the yield.
            def statementDefs = [
                [ s in node::statements -> get_varDefs(s) ]*,
                []];

            ## What's happening here is that for each statement (and the
            ## yield at the end), we get its variable references and remove
            ## from them refs for any variables that are locally defined
            ## before the statement. This produces the array `statementRefs`
            ## whose elements are merged, producing the full set of free
            ## variables referenced by the closure as a whole. Deletion from
            ## the list is achieved by converting the refs to a symtab (names
            ## as keys, values all `null`), and then doing key deletion. The
            ## resulting `statmentRefs` is a list of these symtabs.
            def statementRefs = [
                    s in [node::statements*, node::yield],
                    idx in (0..) ->
                def defs = baseLocals.cat(statementDefs[..!idx]*);
                @{get_varRefs(s)*: null}.del(defs*)
            ];

            ## The result of concatenating all the `statementRefs` is a
            ## symtab. The final result is the list of referenced variable
            ## names, that is, a list of all the keys. The cast to `Map` is
            ## because symtab doesn't have `keyList()`.
            (@{}.cat(statementRefs*) as Map).keyList();
        };

        @closureRef: {
            node::varRefs
        };

        @fetch: {
            get_varRefs(node::target)
        };

        @store: {
            catVarRefs(node::target, node::value)
        };

        @varRef: {
            [node::name]
        };

        @maybe:
        @noYield:
        @varDef: {
            get_varRefs(node::value)
        };

        @importModule:
        @importModuleSelection:
        @importResource: {
            def statements = makeDynamicImport(node);
            catVarRefs(statements*)
        };

        @literal:
        @literalRef:
        @void: {
            []
        }
    }
};
