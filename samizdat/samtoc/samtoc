#!/bin/bash
#
# Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


#
# General setup
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}

init-prog


#
# Argument parsing
#

# Output file name.
outputFile=''

# Did we get `--core-dir` or `--no-core-dir`?
gotCoreDir=0

# Did we get `--out-dir`?
gotOutDir=0

# Whether to compile to binary.
fullCompile=0

# Arguments to pass to `samex`.
samexArgs=()

# Additional arguments passed to the program.
moreArgs=()

while [[ $1 != '' ]]; do
    opt="$1"
    if [[ ${opt} == '--' ]]; then
        shift
        break
    elif [[ ${opt} == '--help' ]]; then
        echo "${progName} [--runtime=<name>] [--in-dir=<dir>]"
        echo "    [--out-dir=<dir> | --output=<path>] [--binary]"
        echo "    [--mode=<mode>] [--core-dir=<dir> | --no-core-dir]"
        echo "    [--external-dirs=<dir>:<dir>...]"
        echo "    [--internal-dir=<dir>] [--dir-selection]"
        echo "    <source-path> ..."
        exit
    elif [[ ${opt} == '--binary' ]]; then
        fullCompile=1
    elif [[    ${opt} =~ ^--in-dir=
            || ${opt} =~ ^--mode=
            || ${opt} =~ ^--external-dirs=
            || ${opt} =~ ^--internal-dir=
            || ${opt} == --dir-selection ]]; then
        moreArgs+=("${opt}")
    elif [[ ${opt} =~ ^--core-dir= ]]; then
        moreArgs+=("${opt}")
        gotCoreDir=1
    elif [[ ${opt} == --no-core-dir ]]; then
        gotCoreDir=1
    elif [[ ${opt} =~ ^--out-dir= ]]; then
        moreArgs+=("${opt}")
        gotOutDir=1
    elif [[ ${opt} =~ ^--output=(.*) ]]; then
        outputFile="${BASH_REMATCH[1]}"
    elif [[ ${opt} =~ ^--runtime= ]]; then
        samexArgs+=("${opt}")
    elif [[ ${opt} =~ ^- ]]; then
        echo "Unknown option: ${opt}" 1>&2
        exit 1
    else
        break
    fi
    shift
done
unset opt

if (( $# == 0 )); then
    echo 'Missing source file name.' 1>&2
    exit 1
elif (( $# > 1 && fullCompile )); then
    echo 'Cannot specify --binary with multiple sources.' 1>&2
    exit 1
elif (( $# > 1 || gotOutDir )); then
    # Multiple source files or `--out-dir` specified.
    if [[ ${outputFile} != '' ]]; then
        echo 'Cannot specify --output with multiple sources or --out-dir.' 1>&2
        exit 1
    fi
else
    # Single source file and no `--out-dir`.
    if [[ ${outputFile} == '' ]]; then
        if (( fullCompile )); then
            outputFile="${1%.sam*}.samb"
        fi
        # If not a "full compile," leave it as unspecified, and let the
        # compiler decide on the output name.
    fi
fi

if [[ ${outputFile} == '-' || ${outputFile} == '/dev/stdout' ]]; then
    outputFile='/dev/stdout'
fi


#
# Main script
#

if (( !gotCoreDir )); then
    # No `--core-dir` specified, so determine and use the default.
    coreDir="$("${baseDir}/helper/find-samex" --core)"
    if [[ $? != 0 ]]; then
        exit 1
    fi
    moreArgs+=("--core-dir=${coreDir}")
fi

if (( fullCompile )); then
    compiledFile="${outputFile}"
    outputFile="${compiledFile%.sam*}.c"
fi

if [[ ${outputFile} != '' ]]; then
    moreArgs+=("--output=${outputFile}")
fi

"${progDir}/samex" "${samexArgs[@]}" "${baseDir}/lib/${progName}" \
    "${moreArgs[@]}" -- "$@" \
|| exit 1

if (( fullCompile )); then
    "${progDir}/compile-samex-addon" --output="${compiledFile}" "${outputFile}"
fi
