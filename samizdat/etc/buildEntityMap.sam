## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Entity map converter
##
## This program accepts the `entity-map.txt` file as input, outputting a
## (very large) map literal corresponding to its contents.
##

import core.FilePath;
import core.Io0;


## Map of hex digit tokens to int values.
def DIGIT_VALUES = {
    @"0": 0,  @"1": 1,  @"2": 2,  @"3": 3,  @"4": 4,
    @"5": 5,  @"6": 6,  @"7": 7,  @"8": 8,  @"9": 9,
    @"A": 10, @"B": 11, @"C": 12, @"D": 13, @"E": 14, @"F": 15
};

## Parses the end of a line, which consists of any number of spaces, optionally
## followed by a comment, and finally followed by a newline.
def parLineEnd = {:
    " "*
    ("#" [! "\n"]*)?
    "\n"
:};

## Parses a comma, optionally surrounded by whitespace.
def parComma = {:
    " "*
    ","
    " "*
:};

## Parses a single code point, yielding the value as a single-character string.
def parCodePoint = {:
    " "*
    "U+"
    "0"*
    digits = (
        ch = ["0".."9" "A".."F"]
        { DIGIT_VALUES[ch.get_name()] }
    )+

    {
        var value = 0;
        for (digit in digits) {
            value := value * 16 + digit
        };
        Class.typeCast(String, value)
    }
:};

## Parses a list of code points, yielding a converted string of them.
def parCodePoints = {:
    codes = parCodePoint+
    { "".cat(codes*) }
:};

## Parses an entry description.
def parDescription = {:
    [! ",\n"]*
:};

## Parses an entity name.
def parName = {:
    chars = ["a".."z" "A".."Z" "0".."9" "."]+
    { $Peg::stringFromTokenList(chars) }
:};

## Parses a single content line.
def parContentLine = {:
    string = parCodePoints
    parComma
    parDescription
    names = (parComma parName)+
    { {names*: string} }
:};

## Parses the entire file.
def parFile = {:
    lines = (
        ## Skip empty lines.
        parLineEnd*
        parContentLine
    )*

    ## Skip trailing empty lines.
    parLineEnd*

    (
        extras = [! "\n"]+
        {
            def string = $Peg::stringFromTokenList(extras);
            die("Unexpected line: \%q(string)")
        }
    )?

    { {}.cat(lines*) }
:};

export fn main(selfPath, .*) {
    def selfDir = $FilePath::get_directory(selfPath);
    def inPath = "\(selfDir)/entity-map.txt";
    def outPath = "\(selfDir)/entityMap.sam";
    note("Processing file: \%q(inPath)");

    def text = $Io0::readFileUtf8(inPath);
    def result = $Peg::apply(parFile, text);

    ## This makes each result line *start* with `,\n`, to make it easy to just
    ## trim the first two characters off the beginning, yielding a valid comma-
    ## separated list of mappings.
    def resultLines = ( mapping in result ->
        ",\n    \\\%q(mapping.key): \%q(mapping.value)"
    );

    def resultText = "".cat(resultLines*)[2..];

    def outText = "\
        ## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
        ## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
        ## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>
        ##
        ## GENERATED FILE. DO NOT MODIFY DIRECTLY.
        ## GENERATED FILE. DO NOT MODIFY DIRECTLY.
        ## GENERATED FILE. DO NOT MODIFY DIRECTLY.
        ##
        ## This file was generated with the buildEntityMap program, using the
        ## file entity-map.txt as input. Rerun that program should the contents
        ## of this file need to be updated.

        #= language core.Lang0

        ## Documented in spec.
        export def ENTITY_MAP = {
        \(resultText)
        }
        ";

    $Io0::writeFileUtf8(outPath, outText);
}
