## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `loop*` function demo
##

## This file is written in a subset of the language. See spec for details.
#= language core.Lang0


##
## Private Definitions
##

## Checks an expected result.
fn expect(name, result, func) {
    If.value { func() }
        { got ->
            If.not { Cmp.eq(got, result) }
                {
                    note("Unexpected result: ", $Format::source(got));
                    die("For: ", name);
                }
        }
        {
            note("Unexpected void result.");
            die("For: ", name);
        }
};

## Checks an expected void result.
fn expectVoid(name, func) {
    If.value { func() }
        { got ->
            note("Unexpected non-void result: ", $Format::source(got));
            die("For: ", name)
        }
};

## Checks an expected equality.
fn expectEq(name, v1, v2) {
    If.not { Cmp.eq(v1, v2) }
        {
            note("Unexpected: ", $Format::source(v1), " != ",
                $Format::source(v2));
            die("For: ", name)
        }
};

## Checks an expected inequality.
fn expectNe(name, v1, v2) {
    If.not { Cmp.ne(v1, v2) }
        {
            note("Unexpected: ", $Format::source(v1), " == ",
                $Format::source(v2));
            die("For: ", name)
        }
};


##
## Main demos
##

fn loop1() {
    var x = 0;

    If.loop {
        x := x.add(1);
        If.is { Cmp.eq(x, 10) }
            { return x }
    };
};

expectEq("loop 1", 10, loop1());

fn loop2() {
    var x = 0;

    If.loop {
        x := x.add(1);
        If.is { Cmp.eq(x, 10) }
            { return x };

        ## Loop closure yield should be ignored.
        123
    };
};

expectEq("loop 2", 10, loop2());

fn loop3() {
    var x = 0;

    return If.loopUntil {
        x := x.add(1);
        Cmp.eq(x, 10)  ## When non-void, should cause loop termination.
    };
};

expectEq("loop 3", 10, loop3());
