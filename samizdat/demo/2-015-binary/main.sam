## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Binary operator demo. Also demos hex and binary numbers, and "digit spaces."
##


##
## Private Definitions
##

## Prints out the given value.
fn msg(value) {
    note($Format::source(value))
};

## Prints out the given value in hex.
fn msgHex(value) {
    note("\%x(value)")
};

## Returns void.
fn returnVoid() {
    return
};


##
## Main Tests
##

## Different bases, and digit spaces.
note("Literals");
msg(1);
msg(1_234);
msg(0x1004);
msg(0b1111_1010);

## Operators.
note("\nInt operators");
msg(1 + 2);
msg(2 - 1);
msg(3 * 4);
msg(6 / 3);
msg(5 % 2);
msg(6 // 3);
msg(5 %% 2);
msg(1 + 2 * 3);
msg((1 + 2) * 3);
msg(2 * 3 * 4 + 5);

msgHex(0xfff0 &&& 0x0fff);
msgHex(0xfff0 ||| 0x0fff);
msgHex(0xfff0 ^^^ 0x0fff);
msgHex(0x00ff <<< 0x8);
msgHex(0xff00 >>> 0x8);

## Ordering. The ones expected to be "falsey" are surrounded by `??` to
## make them easily printable.

note("\nPer-class Order 1");
msg(1 == 1);
msg(2 != 3);
msg(3 < 4);
msg(4 > 3);
msg(5 <= 10);
msg(6 >= 1);
msg("a" == "a");
msg("b" != "a");
msg("c" < "d");

note("\nPer-class Order 2");
msg((1 != 1)??);
msg((1 == 2)??);
msg((1 >= 2)??);
msg((2 <= 1)??);
msg((1 > 2)??);
msg((2 < 2)??);
msg(([1] > [1])??);
msg(([1] <= [0])??);
msg(([1] >= [2])??);

note("\nPer-class Order 3");
msg(1 < 20 < 200);
msg(21 == 21 > 20);
msg(23 >= 22 < 23);  ## This will (properly) fail if a right-hand is returned.
msg(2 != 23 != 24);
msg(9 < 10 < 11 < 24 != 25);
msg((1 != 1 < 2)??);
msg((2 > 3 == 3)??);
msg((4 < 5 == 6)??);
msg((9 < 10 < 11 < 12 != 12)??);

## These help validate the choice of synthetic variable declarations.
msg((9 < 10 < 11) < 12 < 13 < 14);
msg(9 < 10 < (11 < 14 < 15) < 16);
msg(9 < 10 < 15 < (16 < 17 < 18));
msg(9 < 10 < 16 < ((13 < 12 < 11) | 17));
msg(9 < 10 < (11 < (12 < 17 < 18) < 18) < 18);

note("\nTotal Order 1");
msg(1 \== 1);
msg(2 \!= 3);
msg(3 \< 4);
msg(4 \> 3);
msg(5 \<= 10);
msg(6 \>= 1);
msg("a" \== "a");
msg("b" \!= "a");
msg("c" \< "d");

note("\nTotal Order 2");
msg((1 \!= 1)??);
msg((1 \== 2)??);
msg((1 \>= 2)??);
msg((2 \<= 1)??);
msg((1 \> 2)??);
msg((2 \< 2)??);
msg(([1] \> [1])??);
msg(([1] \<= [0])??);
msg(([1] \>= [2])??);

note("\nTotal Order 3");
msg(1 \< 20 \< 200);
msg(21 \== 21 \> 20);
msg(23 \>= 22 \< 23);
msg(2 \!= 23 \!= 24);
msg(9 \< 10 \< 11 \< 24 \!= 25);
msg((1 \!= 1 \< 2)??);
msg((2 \> 3 \== 3)??);
msg((4 \< 5 \== 6)??);
msg((9 \< 10 \< 11 \< 12 \!= 12)??);

note("\nTotal Order 4");
msg(0 \== 0);
msg(1 \!= "1");
msg([2] \!= "2");
msg({3: 3} \!= "3");
msg("4" \!= 4);
msg(5 \< [5]);
msg(6 \< {6: 6});
msg(7 \< "7");
msg([8] \< {8: 8});
msg([9] \< "9");
msg({10: 10} \< "10");
msg("11" \> 11);
msg(12 \<= [12]);
msg("13" \>= {13: 13});

## Logical ops. The ones expected to be "falsey" are surrounded by `??` to
## make them easily printable.
note("\nLogic 1");
msg(1 & 2);
msg(1 & 2 & "three");
msg((1 == 1) & (4 == 4));
msg((1 == 1) & (2 == 2) & (5 == 5));
msg((1 == 1) & (2 == 2) & (3 == 3) & (6 == 6));

msg((returnVoid() & "a")??);
msg((returnVoid() & returnVoid())??);
msg((returnVoid() & returnVoid() & returnVoid())??);
msg((returnVoid() & returnVoid() & returnVoid() & "a")??);
msg(((1 == 1) & (1 == 2))??);
msg(((1 == 1) & (1 == 2) & (3 == 3))??);
msg(((1 == 2) & (2 == 2) & (3 == 3))??);
msg(((1 == 1) & (2 == 2) & (3 == 4))??);

msg((def x = 1) & -x);
msg((def foo = 1) & (def bar = -foo) & (-foo).add(bar));
msg((def blort = "th") & (1 == 1) & (def fizmo = "ree") & blort.cat(fizmo));
msg(((def x = 1) & returnVoid())?);
msg(((def x = []*) & 1)?);

note("\nLogic 2");
msg(10 | true);
msg(20 | returnVoid());
msg(returnVoid() | 30);
msg(returnVoid() | 40 | returnVoid());
msg(returnVoid() | returnVoid() | 50 | returnVoid());
msg(returnVoid() | returnVoid() | returnVoid() | 60);

msg((returnVoid() | returnVoid())??);
msg((returnVoid() | returnVoid() | returnVoid())??);
msg((returnVoid() | returnVoid() | returnVoid() | returnVoid())??);

note("\nType calculus");
msg(1 isa Int);
msg("foo" isa String);
msg((@bar isa Bool)?);
msg("foo" as Symbol);
msg(@foo as String);
