## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## String interpolation demo
##


##
## Private Definitions
##

fn print(string) {
    note(string)
};

##
## Main Tests
##

print("\("Hello.")");
print("\{ "Greetings." }");
print("One \("1") two \(2) three \(@three{x: 3}).");
print("Handy: \($Format::source(["blort", "fizmo", "igram"]))");
print("I like \([@muffins, @scones]).");

print("\
    I like \{
        ## A small sampling of foods.
        def foods = {icky: "sardines", yummy: "muffins"};
        foods::yummy
    }!");

print("\
    I also like \{ /out ->
        #: A couple more foods here. :#
        def foods = {icky: "natto", yummy: "biscuits"};
        If.value { foods::yummy }
            { food -> yield /out food }
    }!");

print("\%s("Zero") \%q(1) \%q("two") \%Q([3, 4, 5]), and 0x\%x(0x6ff).");
print("\%s(["WHYA", ["REYO", ["UREA"]], "DING", "THIS", "?"])");
print("\["AREY", "OURE", "CEIV", "INGM", "E?!?"]");
print("\["a".."z"]");

## Test all the void/empty conversions.
print("[\{}] [\%s{}] [\%q{}]");
print("[\%Q(String.accepts(1))]");
print("[\[]] [\%q[]]");
