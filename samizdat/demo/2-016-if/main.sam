## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## If clause demo
##


##
## Private Definitions
##

fn returnBlort() {
    return "blort"
};

fn returnFrotz() {
    return "frotz"
};

fn returnIgram() {
    return "igram"
};

fn returnVoid() {
    ## I can see through time.
};


##
## Main Tests
##

if (1 \== 1) {
    note("1 is 1")
};

if (1 \== 2) {
    die("1 is 2?!")
};

if (1 \== 1) {
    note("1 is 1")
} else {
    die("1 is not 1?!")
};

if (1 \== 2) {
    die("1 is 2?!")
} else {
    note("1 is not 2")
};

if (1 \== 1) {
    note("1 is 1")
} else if (1 \== 2) {
    die("1 is 2?!")
};

if (1 \== 2) {
    die("1 is 2?!")
} else if (1 \== 3) {
    die("1 is 3?!")
};

if (1 \== 1) {
    note("1 is 1")
} else if (1 \== 2) {
    die("1 is 2?!")
} else {
    die("1 is not 1?!")
};

if (1 \== 2) {
    die("1 is 2?!")
} else if (1 \== 1) {
    note("1 is 1")
} else {
    die("1 is not 1?!")
};

if (1 \== 2) {
    die("1 is 2?!")
} else if (1 \== 3) {
    die("1 is 3?!")
} else {
    note("1 is not 2 or 3")
};

def blort1 = if (1 \== 1) {
    "1 is 1"
} else {
    die("1 is not 1?!")
};

note(blort1);

def blort2 = if /out (1 \== 2) {
    die("1 is 2?!")
} else {
    yield /out "1 is not 2"
};

note(blort2);

def blort3 = if (1 \== 3) {
    die("1 is 3?!")
} else { /out ->
    yield /out "1 is not 3"
};

note(blort3);

def blort4 = if /extra (4 \== 4) { /out ->
    yield /out "4 is 4"
} else {
    die("4 is not 4?!")
};

note(blort4);

if (def x = returnBlort()) {
    note(x)
};

if (def x = returnBlort()) {
    note(x)
} else {
    die("Um?!")
};

if (def x = returnVoid()) {
    die("Um?!")
} else {
    note("The expected void.")
};

if (def x = returnVoid()) {
    die("Um?!")
} else if (def y = returnFrotz()) {
    note(y)
} else if (def x = returnIgram()) {
    note(x)
};

if (def x = returnVoid()) {
    die("Um?!")
} else if (def y = returnBlort()) {
    note(y)
} else if (def y = returnFrotz()) {
    note(y)
} else if (def x = returnIgram()) {
    note(x)
};

if (def x = returnVoid()) {
    die("Um?!")
} else if (def y = returnVoid()) {
    die("Um?!")
} else if (def x = returnIgram()) {
    note(x)
} else {
    note("Um?!")
};

if (def x = "fr", def y = "otz") {
    note(x, y)
} else {
    die("Um?")
};

if (def x = "x", def y = returnVoid()) {
    die("Um?!")
} else {
    note("Yes.")
};

if (def x = returnVoid(), def y = "y") {
    die("Um?!")
} else {
    note("Yes.")
};

if (def x = "fr", "stuff", def y = "ot", def z = "z") {
    note(x, y, z)
};

if (def x = returnVoid()) {
    die("Um?!")
} else if (def x = "fi", "stuff", def y = "zm", def z = "o") {
    note(x, y, z)
};

var wantVoid = (
    if /out (true) { "x" }
)?;
if (!Cmp.eq(wantVoid, [])) { die("Bad void 1.") };

wantVoid := (
    if /out (returnVoid()) { "x" }
    else { "y" }
)?;
if (!Cmp.eq(wantVoid, [])) { die("Bad void 2.") };

wantVoid := (
    if /out (returnVoid()) { "x" }
    else if (returnVoid()) { "y" }
    else { "z" }
)?;
if (!Cmp.eq(wantVoid, [])) { die("Bad void 3.") };
