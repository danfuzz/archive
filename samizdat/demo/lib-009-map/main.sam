## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `Map` demo
##

## This file is written in a subset of the language. See spec for details.
#= language core.Lang0


##
## Private Definitions
##

## Checks an expected result.
fn expect(name, result, func) {
    If.value { func() }
        { got ->
            If.not { Cmp.eq(got, result) }
                {
                    note("Unexpected result: ", $Format::source(got));
                    die("For: ", name);
                }
        }
        {
            note("Unexpected void result.");
            die("For: ", name);
        }
};

## Checks an expected void result.
fn expectVoid(name, func) {
    If.value { func() }
        { got ->
            note("Unexpected non-void result: ", $Format::source(got));
            die("For: ", name)
        }
};

## Checks an expected equality.
fn expectEq(name, v1, v2) {
    If.not { Cmp.eq(v1, v2) }
        {
            note("Unexpected: ", $Format::source(v1), " != ",
                $Format::source(v2));
            die("For: ", name)
        }
};

## Checks an expected inequality.
fn expectNe(name, v1, v2) {
    If.not { Cmp.ne(v1, v2) }
        {
            note("Unexpected: ", $Format::source(v1), " == ",
                $Format::source(v2));
            die("For: ", name)
        }
};


##
## Main demos
##

note("Maps");

expectEq("eq 1", {}, {});
expectEq("eq 2", {a: 10}, {a: 10});
expectEq("eq 3", {a: 10}, {@a: 10});
expectEq("eq 4", {{}: {}}, {{}: {}});
expectEq("eq 5", {x: 5, y: 7}, {y: 7, x: 5});
expectEq("eq 6", {[@x, @y, @z]*: "blort"}, {x: "blort", y: "blort", z: "blort"});
expectEq("eq 7", {{a: 1}*, b: 2}, {a: 1, b: 2});

expectNe("ne 1", {[@x]: "blort"}, {x: "blort"});

expectEq("del 1",  {},           {}.del());
expectEq("del 2",  {a: 1},       {a: 1}.del());
expectEq("del 3",  {a: 1},       {a: 1}.del(@b));
expectEq("del 4",  {},           {a: 1}.del(@a));
expectEq("del 5",  {a: 1},       {a: 1, b: 2}.del(@b));
expectEq("del 6",  {b: 2},       {a: 1, b: 2}.del(@a));
expectEq("del 7",  {a: 1, b: 2}, {a: 1, b: 2}.del(@x));
expectEq("del 8",  {},           {a: 1, b: 2}.del(@a, @b));
expectEq("del 9",  {b: 2},       {a: 1, b: 2, c: 3}.del(@a, @c));
expectEq("del 10", {b: 2, d: 4}, {a: 1, b: 2, c: 3, d: 4}.del(@a, @c));
expectEq("del 11", {b: 2},       {a: 1, b: 2, c: 3, d: 4}.del(@a, @c, @d));

expectVoid("forEach 1",           { {}.forEach() });
expectEq("forEach 2",   {a:1},    {a: 1}.forEach());
expectEq("forEach 3",   {c:3},    {a:1, b:2, c:3}.forEach());
expectEq("forEach 4",   "{x: 9}", {a:1, b:2, c:3, x:9}.forEach { m -> $Format::source(m) });

var x = "";
{a:1, b:2, c:3}.forEach { mapping -> x := x.cat($Format::source(mapping)) };
expectEq("forEach 5", "{a: 1}{b: 2}{c: 3}", x);

expectEq("keyList 1", [],       {}.keyList());
expectEq("keyList 2", [@a],     {a: 10}.keyList());
expectEq("keyList 3", [@a, @b], {a: 10, b: 20}.keyList());
expectEq("keyList 4", [@a, @b], {b: 20, a: 10}.keyList());

expectEq("valueList 1", [],       {}.valueList());
expectEq("valueList 2", [10],     {a: 10}.valueList());
expectEq("valueList 3", [10, 20], {a: 10, b: 20}.valueList());
expectEq("valueList 4", [10, 20], {b: 20, a: 10}.valueList());

## The first map's keys are symbols in the following.
expectNe("ne 2", {null: 1}, {(null): 1});
expectNe("ne 3", {true: 1}, {(true): 1});
expectNe("ne 4", {false: 1}, {(false): 1});

expectEq("cat", {10: 1, 20: 2, 30: 3}, {10: 1}.cat({30: 3}, {20: 2}));
expectEq("cat", {10: 1, 20: 2}, {10: 10}.cat({10: 1, 20: 2}));
expectEq("cat", {10: 1, 20: 2}, {10: 10}.cat({10: 100, 20: 2, 10: 1}));

## Symbol table conversion.
expectEq("symtab 1", {},             {}.cat(@{}));
expectEq("symtab 2", {a: 10},        {}.cat(@{a: 10}));
expectEq("symtab 3", {a: 10, b: 20}, {b: 20}.cat(@{a: 10}));

## Record conversion.
expectEq("record 1", {}, Map.castFrom(@blort{}));
expectEq("record 2", {blort: "x"}, Map.castFrom(@blort{blort: "x"}));

## Interpolation.
expectEq("interpolate 1",
    {blort: "x", fizmo: "y"},
    {blort: "x", @{fizmo: "y"}*});
expectEq("interpolate 2",
    {blort: "x", fizmo: "y"},
    {@{blort: "x"}*, fizmo: "y"});
expectEq("interpolate 3",
    {blort: "x", fizmo: "y"},
    {@foo{blort: "x"}*, @{fizmo: "y"}*});

note("All good.");
