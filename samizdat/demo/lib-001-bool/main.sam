## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Boolean demo
##

## This file is written in a subset of the language. See spec for details.
#= language core.Lang0


##
## Private Definitions
##

## Checks an expected result.
fn expect(name, result, func) {
    If.value { func() }
        { got ->
            If.not { Cmp.eq(got, result) }
                {
                    note("Unexpected result: ", $Format::source(got));
                    die("For: ", name);
                }
        }
        {
            note("Unexpected void result.");
            die("For: ", name);
        }
};

## Checks an expected void result.
fn expectVoid(name, func) {
    If.value { func() }
        { got ->
            note("Unexpected non-void result: ", $Format::source(got));
            die("For: ", name)
        }
};


##
## Main demos
##

note("Booleans");
note($Format::source(false));
note($Format::source(true));

expect("eq 1", true, { Cmp.eq(true, true) });
expect("eq 2", false, { Cmp.eq(false, false) });
expectVoid("eq 3", { Cmp.eq(true, false) });
expectVoid("eq 4", { Cmp.eq(false, true) });

expect("and 1", false, { false.and(false) });
expect("and 2", false, { false.and(true) });
expect("and 3", false, { true.and(false) });
expect("and 4", true,  { true.and(true) });

expect("or 1", false, { false.or(false) });
expect("or 2", true,  { false.or(true) });
expect("or 3", true,  { true.or(false) });
expect("or 4", true,  { true.or(true) });

expect("xor 1", false, { false.xor(false) });
expect("xor 2", true,  { false.xor(true) });
expect("xor 3", true,  { true.xor(false) });
expect("xor 4", false, { true.xor(true) });

expect("not 1", true,  { false.not() });
expect("not 2", false, { true.not() });

expect("bit 1", 0, { false.bit(0) });
expect("bit 2", 1, { true.bit(0) });
expect("bit 3", 0, { false.bit(1) });
expect("bit 4", 0, { true.bit(1) });
expect("bit 5", 0, { false.bit(2) });
expect("bit 6", 0, { true.bit(2) });

expect("bitSize 1", 1, { false.bitSize() });
expect("bitSize 2", 1, { true.bitSize() });

expect("shl1 ", false, { false.shl(0) });
expect("shl2 ", false, { false.shl(1) });
expect("shl3 ", false, { false.shl(2) });
expect("shl4 ", false, { false.shl(-1) });
expect("shl5 ", false, { false.shl(-2) });
expect("shl6 ", true,  { true.shl(0) });
expect("shl7 ", false, { true.shl(-1) });
expect("shl8 ", false, { true.shl(-2) });

expect("shr 1", false, { false.shr(0) });
expect("shr 2", false, { false.shr(-1) });
expect("shr 3", false, { false.shr(-2) });
expect("shr 4", false, { false.shr(1) });
expect("shr 5", false, { false.shr(2) });
expect("shr 6", true,  { true.shr(0) });
expect("shr 7", false, { true.shr(1) });
expect("shr 8", false, { true.shr(2) });

expect("fromLogic 1", false, { Bool.fromLogic() });
expect("fromLogic 2", true,  { Bool.fromLogic(true) });
expect("fromLogic 3", true,  { Bool.fromLogic(false) });
expect("fromLogic 4", true,  { Bool.fromLogic("blort") });

expectVoid("toLogic 1",   { false.toLogic() });
expect("toLogic 2", true, { true.toLogic() });

expect("castFrom 1", true,  { Bool.castFrom(true) });
expect("castFrom 2", false, { Core.castFrom(false) });
expect("castFrom 3", false, { Value.castFrom(false) });
expect("castFrom 4", false, { Bool.castFrom(0) });
expect("castFrom 5", true,  { Bool.castFrom(1) });
expectVoid("castFrom 6",    { Bool.castFrom(2) });
expectVoid("castFrom 7",    { Bool.castFrom(null) });

expect("castToward 1", false, { false.castToward(Bool) });
expect("castToward 2", false, { false.castToward(Core) });
expect("castToward 3", true,  { true.castToward(Value) });
expect("castToward 4", 0,     { false.castToward(Int) });
expect("castToward 5", 1,     { true.castToward(Int) });
expectVoid("castToward 6",    { false.castToward(String) });
expectVoid("castToward 7",    { true.castToward(Symbol) });

note("All good.");
