## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `List` demo
##

## This file is written in a subset of the language. See spec for details.
#= language core.Lang0


##
## Private Definitions
##

## Checks an expected result.
fn expect(name, result, func) {
    If.value { func() }
        { got ->
            If.not { Cmp.eq(got, result) }
                {
                    note("Unexpected result: ", $Format::source(got));
                    die("For: ", name);
                }
        }
        {
            note("Unexpected void result.");
            die("For: ", name);
        }
};

## Checks an expected void result.
fn expectVoid(name, func) {
    If.value { func() }
        { got ->
            note("Unexpected non-void result: ", $Format::source(got));
            die("For: ", name)
        }
};

## Checks an expected equality.
fn expectEq(name, v1, v2) {
    If.not { Cmp.eq(v1, v2) }
        {
            note("Unexpected: ", $Format::source(v1), " != ",
                $Format::source(v2));
            die("For: ", name)
        }
};

## Checks an expected inequality.
fn expectNe(name, v1, v2) {
    If.not { Cmp.ne(v1, v2) }
        {
            note("Unexpected: ", $Format::source(v1), " == ",
                $Format::source(v2));
            die("For: ", name)
        }
};


##
## Main demos
##

note("Lists");

expectEq("eq 1", [], []);
expectEq("eq 2", [0], [0]);
expectEq("eq 3", [[]], [[]]);
expectEq("eq 4", [0, 0, 0], [0, 0, 0]);
expectEq("eq 5", [[]*, 1], [1]);
expectEq("eq 6", [1, 2, [3, 4]*], [1, [2, 3]*, 4]);

expectNe("ne 1", [], [[]]);
expectNe("ne 2", [1], [2]);

expectEq("cat", [9, 8, 7, 6, 5, 4], [9, 8, 7].cat([6, 5, 4]));

expectEq("del 1",  [],     [].del());
expectEq("del 2",  [],     [].del("wha?"));
expectEq("del 3",  [],     [].del(-1));
expectEq("del 4",  [],     [].del(0));
expectEq("del 5",  [],     [].del(1));
expectEq("del 5",  [],     ["x"].del(0));
expectEq("del 6",  ["x"],  ["x"].del(-1));
expectEq("del 7",  ["x"],  ["x"].del(1));
expectEq("del 8",  ["x"],  ["x", "y"].del(1));
expectEq("del 9",  ["y"],  ["x", "y"].del(0));
expectEq("del 10", ["y"],  ["x", "y"].del(0, 0));
expectEq("del 11", [],     ["x", "y"].del(0, 1));
expectEq("del 12", [2, 3], [0, 1, 2, 3, 4].del(0, 1, 4));

expectVoid("forEach 1",     { [].forEach() });
expectEq("forEach 2",   1,  [1].forEach());
expectEq("forEach 3",   3,  [1, 2, 3].forEach());
expectEq("forEach 4",   13, [1, 2, 3].forEach { n -> n.add(10) });

var x = 0;
[1, 2, 3].forEach { n -> x := x.add(n) };
expectEq("forEach 5", 6, x);

expectEq("keyList 1", [],        [].keyList());
expectEq("keyList 2", [0],       ["x"].keyList());
expectEq("keyList 3", [0, 1, 2], [@a, @b, @c].keyList());

expectEq("valueList 1", [],           [].valueList());
expectEq("valueList 2", ["x"],        ["x"].valueList());
expectEq("valueList 3", [@a, @b, @c], [@a, @b, @c].valueList());

expectEq("repeat 1", [],                   [].repeat(0));
expectEq("repeat 2", [],                   [].repeat(1));
expectEq("repeat 3", [],                   [].repeat(1000));
expectEq("repeat 4", [],                   [1, 2, 3].repeat(0));
expectEq("repeat 5", [1, 2, 3],            [1, 2, 3].repeat(1));
expectEq("repeat 6", [1, 2, 3, 1, 2, 3],   [1, 2, 3].repeat(2));
expectEq("repeat 7", ["x", "x", "x", "x"], ["x"].repeat(4));

expectVoid("reverseNth 1",     { [].reverseNth(0) });
expectVoid("reverseNth 2",     { [].reverseNth(1) });
expectVoid("reverseNth 3",     { [].reverseNth(-1) });
expectEq("reverseNth 4",   10, [10].reverseNth(0));
expectVoid("reverseNth 5",     { [10].reverseNth(1) });
expectVoid("reverseNth 6",     { [10].reverseNth(-1) });
expectEq("reverseNth 7",   @x, [@z, @y, @x].reverseNth(0));
expectEq("reverseNth 8",   @y, [@z, @y, @x].reverseNth(1));
expectEq("reverseNth 9",   @z, [@z, @y, @x].reverseNth(2));
expectVoid("reverseNth 10",    { [@z, @y, @x].reverseNth(3) });
expectVoid("reverseNth 11",    { [@z, @y, @x].reverseNth(-1) });

expectVoid("sliceExclusive 1",        { [].sliceExclusive(0) });
expectVoid("sliceExclusive 2",        { [].sliceExclusive(1) });
expectVoid("sliceExclusive 3",        { [].sliceExclusive(-1) });
expectVoid("sliceExclusive 4",        { [].sliceExclusive(-2, -2) });
expectEq("sliceExclusive 5",  [],     [].sliceExclusive(0, 2));
expectEq("sliceExclusive 6",  [],     [1].sliceExclusive(0));
expectEq("sliceExclusive 7",  [],     [].sliceExclusive(0, 0));
expectEq("sliceExclusive 8",  [1],    [1].sliceExclusive(0, 1));
expectEq("sliceExclusive 9",  [2, 3], [1, 2, 3, 4].sliceExclusive(1, 3));
expectEq("sliceExclusive 10", [3],    [1, 2, 3, 4].sliceExclusive(2));
expectVoid("sliceExclusive 11",       { [1, 2, 3, 4].sliceExclusive(3, 2) });

expectEq("sliceInclusive 1",  [],     [].sliceInclusive(0));
expectVoid("sliceInclusive 2",        { [].sliceInclusive(1) });
expectEq("sliceInclusive 3",  [],     [].sliceInclusive(-1));
expectVoid("sliceInclusive 4",        { [].sliceInclusive(-2, -2) });
expectEq("sliceInclusive 5",  [],     [].sliceInclusive(0, 2));
expectEq("sliceInclusive 6",  [1],    [1].sliceInclusive(0));
expectEq("sliceInclusive 7",  [1],    [1].sliceInclusive(0, 0));
expectEq("sliceInclusive 8",  [1],    [1].sliceInclusive(0, 1));
expectEq("sliceInclusive 9",  [2, 3], [1, 2, 3, 4].sliceInclusive(1, 2));
expectEq("sliceInclusive 10", [3, 4], [1, 2, 3, 4].sliceInclusive(2));
expectEq("sliceInclusive 11", [],     [1, 2, 3, 4].sliceInclusive(3, 2));
expectVoid("sliceInclusive 12",       { [1, 2, 3, 4].sliceInclusive(3, 1) });

expectEq("sliceGeneral 1", [4,5], [0,1,2,3,4,5].sliceGeneral(@inclusive, @fromStart{value: 4}));
expectEq("sliceGeneral 2", [4],   [0,1,2,3,4,5].sliceGeneral(@exclusive, @fromStart{value: 4}));
expectEq("sliceGeneral 3", [1,2], [0,1,2,3,4,5].sliceGeneral(@inclusive, @fromStart{value: 1}, @fromStart{value: 2}));
expectEq("sliceGeneral 4", [1,2], [0,1,2,3,4,5].sliceGeneral(@exclusive, @fromStart{value: 1}, @fromStart{value: 3}));
expectEq("sliceGeneral 5", [5],   [0,1,2,3,4,5].sliceGeneral(@inclusive, @fromEnd{value: 0}));
expectEq("sliceGeneral 6", [4],   [0,1,2,3,4,5].sliceGeneral(@exclusive, @fromEnd{value: 1}));
expectEq("sliceGeneral 7", [3,4], [0,1,2,3,4,5].sliceGeneral(@inclusive, @fromEnd{value: 2}, @fromEnd{value: 1}));

note("All good.");
