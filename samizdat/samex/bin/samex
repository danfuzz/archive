#!/bin/bash
#
# Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


#
# General setup
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}

init-prog


#
# Argument parsing
#

# Whether to build a binary.
build=0

# Whether to clean before building.
clean=0

# Whether to just build (and not run).
justBuild=0

# Whether to build with optimization, when building.
optimize=1

# Preferred runtime name option.
runtimeName=''

# Whether to time the run.
timeRun=0

# Whether to profile the run.
profileRun=0

while [[ $1 != '' ]]; do
    opt="$1"
    if [[ ${opt} == '--' ]]; then
        shift
        break
    elif [[ ${opt} == '--help' ]]; then
        echo "${progName} [--runtime=<name>]"
        echo '    [--build] [--clean-build] [--just-build] [--no-optimize]'
        echo '    [--time | --profile]'
        exit
    elif [[ ${opt} == '--build' ]]; then
        build=1
    elif [[ ${opt} == '--clean-build' ]]; then
        build=1
        clean=1
    elif [[ ${opt} == '--just-build' ]]; then
        build=1
        justBuild=1
    elif [[ ${opt} == '--no-optimize' ]]; then
        optimize=0
        build=1
    elif [[ ${opt} == '--profile' ]]; then
        profileRun=1
        timeRun=0
    elif [[ ${opt} =~ ^--runtime=(.*) ]]; then
        runtimeName="${BASH_REMATCH[1]}"
    elif [[ ${opt} == '--time' ]]; then
        timeRun=1
        profileRun=0
    elif [[ ${opt} =~ ^- ]]; then
        echo "Unknown option: ${opt}" 1>&2
        exit 1
    else
        break
    fi
    shift
done
unset opt


#
# Main script
#

# Build the binary, if requested.

if (( build )); then
    if [[ ${runtimeName} == '' ]]; then
        echo 'No --runtime specified.' 1>&2
        exit 1
    fi

    sourceDir="$(cd "${baseDir}/../.."; pwd)"
    projectDir="${sourceDir}/samex-${runtimeName}"
    if [[ ! -d "${projectDir}" ]]; then
        echo "Source directory not found: ${projectDir}" 1>&2
        exit 1
    fi

    buildOpts=()

    if (( !optimize )); then
        buildOpts=(--no-optimize)
    fi

    if (( clean )); then
        rm -rf "${sourceDir}/out" || exit 1
    fi

    "${sourceDir}/blur/blur" \
        --in-dir="${projectDir}" "${buildOpts[@]}" \
        || exit 1

    if (( justBuild )); then
        exit
    fi
fi

runtimeOpt=()
if [[ ${runtimeName} != '' ]]; then
    runtimeOpt=(--runtime="${runtimeName}")
fi

name="$("${baseDir}/helper/find-samex" "${runtimeOpt[@]}" --bin)"
if [[ $? != 0 ]]; then
    exit 1
fi

cmd=("${name}" "$@")

if (( timeRun )); then
    startTime="$(date '+%s')"
    "${cmd[@]}"
    exitStatus="$?"
    endTime="$(date '+%s')"
    (( totalSecs = endTime - startTime ))
    (( totalMins = totalSecs / 60 ))
    (( totalSecs = totalSecs - totalMins * 60 ))
    echo ''
    printf 'Elapsed time: %dm %02ds\n' "${totalMins}" "${totalSecs}"
    exit "${exitStatus}"
elif (( profileRun )); then
    # May also want to use the -allocations option.
    iprofiler -T 20s -timeprofiler "${cmd[@]}"
else
    exec "${cmd[@]}"
fi
