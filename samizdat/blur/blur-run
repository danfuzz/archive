#!/bin/bash
#
# Copyright 2014 the Blur Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>


#
# General setup
#

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}

init-prog
. "${progDir}/blur-utils.sh"


#
# Argument parsing
#

# Error flag.
error=0

# File to find rules in.
rulesFile='-'

# Verbosity level.
spew=1

# Initial logging depth.
startingDepth=0

while [[ $1 != '' ]]; do
    opt="$1"
    if [[ ${opt} == '--' ]]; then
        shift
        break
    elif [[ ${opt} == '--help' ]]; then
        error='usage'
    elif [[ ${opt} =~ ^--rules=(.*) ]]; then
        rulesFile="${BASH_REMATCH[1]}"
    elif [[ ${opt} =~ ^--quiet ]]; then
        spew=0
    elif [[ ${opt} =~ ^--verbose=(.*) ]]; then
        spew="${BASH_REMATCH[1]}"
    elif [[ ${opt} =~ ^--depth=(.*) ]]; then
        startingDepth="${BASH_REMATCH[1]}"
        startingDepth=$(( startingDepth + 0 ))
    elif [[ ${opt} =~ ^- ]]; then
        echo "Unknown option: ${opt}" 1>&2
        error=1
    else
        break
    fi
    shift
done
unset opt

# Initial targets (files or named ids).
targets=("$@")

if [[ ${error} != 0 ]]; then
    echo 1>&2 "${progName} --help"
    echo 1>&2 "${progName} [--rules=<file>] [--quiet | --verbose=<level>]"
    echo 1>&2 "    [--depth=<n>] (target-file | id) ..."
    if [[ ${error} == 'usage' ]]; then
        error=0
    fi
    exit ${error}
fi

if [[ ${rulesFile} == '-' ]]; then
    rulesFile='/dev/stdin'
fi


#
# Logging / spew
#

# Maximum line size, in columns. The double call is because redirecting
# stderr within a process substitution leaves `tput` without access to a
# terminal device to query. See <http://stackoverflow.com/questions/21763397>.
tput cols >/dev/null 2>&1 && MAX_COLS="$(tput cols)"
if [[ ${MAX_COLS} == '' ]]; then
    MAX_COLS=79
else
    (( MAX_COLS-- ))
fi

# Current depth
DEPTH=0

# Layer names.
LAYERS=()

# Writes the current layer depth to stdout.
function layer-depth {
    echo $(( DEPTH + startingDepth ))
}

# Increase status message depth.
function enter-layer {
    local name="$@"

    LAYERS[${DEPTH}]="${name}"
    msg --verbose ">> ${name}"

    (( DEPTH++ ))
}

# Decrease status message depth.
function leave-layer {
    (( DEPTH-- ))

    local name="${LAYERS[${DEPTH}]}"
    unset LAYERS[${DEPTH}]

    msg --verbose "<< ${name}"
}

# Dump a layer trace.
function trace-layers {
    local i

    for (( i = DEPTH - 1; i >= 0; i-- )); do
        msg --err "...while in ${LAYERS[$i]}"
    done
}

# Emit a status message.
function msg {
    local level=1

    if [[ $1 == '--err' ]]; then
        level=0
        shift
    elif [[ $1 == '--detail-err' ]]; then
        # This is to spew things that were earlier spewed as --detail that
        # are salient to an error report.
        level=-1
        shift
    elif [[ $1 == '--verbose' ]]; then
        level=2
        shift
    elif [[ $1 == '--detail' ]]; then
        level=3
        shift
    fi

    local line="$@"

    if (( level == -1 )); then
        # Only emit `detail-err` messages on low spew levels.
        if (( spew >= 3 )); then
            return
        fi
    elif (( level > spew )); then
        # Message is out-of-range for current spew level.
        return
    fi

    local max="${MAX_COLS}"

    if (( spew >= 2 )); then
        local i
        for (( i = DEPTH + startingDepth; i > 0; i-- )); do
            printf '  '
        done
        (( max -= (DEPTH + startingDepth) * 2 ))
        if (( max < 25 )); then
            max=25
        fi
    fi

    if (( spew <= 2 && level >= 0 )); then
        if (( ${#line} > max )); then
            local len=$(( (max - 5) / 2 ))
            line="${line:0:${len}} ... ${line:$(( ${#line} - len ))}"
        fi
    fi

    printf '%s\n' "${line}"
}


#
# Helper functions
#

# Adds an association between a target and a rule number.
function add-rule-to-target {
    local rule="$1"
    local target="$2"

    local v="_rules$(mangle-string "${target}")"
    eval "${v}+=' ${rule}'"
}

# Outputs a sorted whitespace-separated list of all indices into `RULES`
# for rules associated with the given target. The target can be either a
# named id or a file.
function rules-for-target {
    local target="$1"
    local v="_rules$(mangle-string "${target}")"

    eval "echo \$${v}"
}

# Indicates that the given word is a defined id.
function define-as-id {
    local id="$1"
    local v="_id$(mangle-string "${id}")"
    eval "${v}=yes"
}

# Exits success if the given word is a defined id.
function is-id {
    local id="$1"
    local v="_id$(mangle-string "${id}")"
    local value="$(eval "echo \$${v:-no}")"

    if [[ ${value} == yes ]]; then
        return 0
    fi

    return 1
}

# Collects all the rules into the `RULES` array (one element per rule). This
# also canonicalizes the spacing of rules, so that there's no initial indent,
# and one space after the command. Finally, this also sets up the `IDS` array,
# which lists all named ids.
RULES=()
function rules-init {
    local cmd rest curRule=()

    while read -r cmd rest; do
        [[ ${rest} == '' ]] \
            && curRule+=("${cmd}") || curRule+=("${cmd} ${rest}")
        case "${cmd}" in
            (rule-start)
                curRule=()
                ;;
            (rule-end)
                unset curRule[$((${#curRule[@]} - 1))]
                RULES+=("$(printf '%s\n' "${curRule[@]}")")
                curRule=()
                ;;
            (target)
                add-rule-to-target "${#RULES[@]}" "$(unquote-abs "${rest}")"
                ;;
            (id)
                local id=("$(unquote "${rest}")")
                define-as-id "${id}"
                add-rule-to-target "${#RULES[@]}" "${id}"
                ;;
        esac
    done < "${rulesFile}"
}

# Checks the given timestamps for newest req and oldest target. Returns
# true (0) if it indicates stale / missing targets.
function is-stale {
    local newestReq="$1"
    local oldestTarget="$2"

    if (( newestReq < 0 || oldestTarget < 0 )); then
        # Either no reqs specified, no targets specified, or a nonexistent
        # target.
        return 0
    fi

    if (( newestReq > oldestTarget )); then
        # There is at least one req that is newer than one target.
        return 0
    fi

    # Nothing is stale, so exit false (failure).
    return 1
}

# Runs the given rule if any of:
# * it has no reqs
# * it has no targets
# * at least one target doesn't exist
# * at least one existing target has an older modification time than at least
#   one req
function run-if-needed {
    local rule="$1"
    local cmd rest

    # Check asserts and moots.
    while read -r cmd rest; do
        case "${cmd}" in
            (moot)
                rest="$(unquote "${rest}")"
                msg --detail '??' "${rest}"
                bash -c "${rest}"
                if [[ $? == 0 ]]; then
                    # Moot test succeeded, which means that the rule doesn't
                    # need to execute anything.
                    return
                fi
                ;;
            (assert)
                rest="$(unquote "${rest}")"
                msg --detail '!!' "${rest}"
                bash -c "${rest}"
                if [[ $? != 0 ]]; then
                    # Assert failed, which is a real error.
                    msg --detail-err '!!' "${rest}"
                    msg --err "Assert failed."
                    trace-layers
                    return 1
                fi
                ;;
        esac
    done <<< "${rule}"

    local newReqs=()   oldTargets=()   useValues=()
    local reqs=()      targets=()      values=()
    local newestReq=-1 oldestTarget=-1
    local inGroup=0 anyGroups=0 anyStale=0 stamp

    while read -r cmd rest; do
        case "${cmd}" in
            (group-start)
                if (( inGroup )); then
                    msg --err "Group within group."
                    trace-layers
                    return 1
                elif [[ ${#reqs[@]} != 0 ||
                        ${#targets[@]} != 0 ||
                        ${#values[@]} != 0 ]]; then
                    msg --err "Reqs, targets, or values outside group."
                    trace-layers
                    return 1
                fi
                inGroup=1
                anyGroups=1
                ;;
            (group-end)
                if (( ! inGroup )); then
                    msg --err "Not in group."
                    trace-layers
                    return 1
                elif is-stale "${newestReq}" "${oldestTarget}"; then
                    anyStale=1
                    newReqs+=("${reqs[@]}")
                    oldTargets+=("${targets[@]}")
                    useValues+=("${values[@]}")
                fi
                # Reset for further groups.
                reqs=()
                targets=()
                values=()
                newestReq=-1
                oldestTarget=-1
                inGroup=0
                ;;
            (req)
                rest="$(unquote "${rest}")"
                if ! is-id "${rest}"; then
                    rest="$(abs-path "${rest}")"
                    reqs+=("${rest}")
                    if [[ ! -e "${rest}" ]]; then
                        msg --err "Missing req: ${rest}"
                        trace-layers
                        return 1
                    elif [[ ! -d "${rest}" ]]; then
                        # Update req timestamp only if the req is *not* a
                        # directory. (Directory modtimes aren't really useful.)
                        stamp="$(mod-time "${rest}")"
                        if (( stamp > newestReq )); then
                            newestReq="${stamp}"
                        fi
                    fi
                fi
                ;;
            (target)
                rest="$(unquote-abs "${rest}")"
                targets+=("${rest}")
                if [[ ! -e "${rest}" ]]; then
                    # Missing target. Means that we need to run the rule
                    # (unless previously mooted).
                    oldestTarget=-1
                else
                    stamp="$(mod-time "${rest}")"
                    if (( oldestTarget == -1 || stamp < oldestTarget )); then
                        oldestTarget="${stamp}"
                    fi
                fi
                ;;
            (value)
                rest="$(unquote "${rest}")"
                values+=("${rest}")
                ;;
            (*)
                if (( inGroup )); then
                    msg --err "Invalid command in group: ${cmd}"
                    trace-layers
                    return 1
                fi
                ;;
        esac
    done <<< "${rule}"

    # Handle reqs/targets that weren't part of a group.
    if (( anyGroups )); then
        if [[ ${#reqs[@]} != 0 || ${#targets[@]} != 0 ]]; then
            msg --err "Cannot mix grouped / ungrouped dependencies."
            trace-layers
            return 1
        fi
    elif is-stale "${newestReq}" "${oldestTarget}"; then
        anyStale=1
        newReqs+=("${reqs[@]}")
        oldTargets+=("${targets[@]}")
        useValues+=("${values[@]}")
    fi

    if (( ! anyStale )); then
        # Everything is up-to-date, and there is at least one req and one
        # target.
        return
    fi

    # Need to run the associated commands.

    if (( spew > 2 )); then
        local name

        if [[ ${#oldTargets[@]} != 0 ]]; then
            msg "Stale targets:"
            for name in "${oldTargets[@]}"; do
                msg "  ${name}"
            done
        fi

        if [[ ${#newReqs[@]} != 0 ]]; then
            msg "New reqs:"
            for name in "${newReqs[@]}"; do
                msg "  ${name}"
            done
        fi

        if [[ ${#useValues[@]} != 0 ]]; then
            msg "Values:"
            for name in "${useValues[@]}"; do
                msg "  ${name}"
            done
        fi
    fi

    while read -r cmd rest; do
        case "${cmd}" in
            (cmd)
                rest="$(unquote "${rest}")"
                msg --detail '$$' "${rest}"
                bash -c "
                    STALE_TARGETS=($(quote "${oldTargets[@]}"))
                    NEW_REQS=($(quote "${newReqs[@]}"))
                    VALUES=($(quote "${useValues[@]}"))
                    ${rest}"
                local status="$?"
                if [[ ${status} != 0 ]]; then
                    msg --detail-err '$$' "${rest}"
                    msg --err "Non-zero exit status: ${status}"
                    trace-layers
                    return 1
                fi
                ;;
            (build-in-dir)
                rest="$(unquote "${rest}")"
                enter-layer "blur ${rest}"
                "${progDir}/blur" \
                    --depth="$(layer-depth)" \
                    --verbose="${spew}" \
                    --in-dir="${rest}" \
                    -- "${oldTargets[@]}"
                local status="$?"
                if [[ ${status} != 0 ]]; then
                    msg --err "Non-zero exit status: ${status}"
                    trace-layers
                    leave-layer
                    return 1
                fi
                leave-layer
                ;;
            (msg)
                rest="$(unquote "${rest}")"
                msg "${rest}"
                ;;
        esac
    done <<< "${rule}"
}

# Attempts to satisfy the indicated target. The target can be either a file
# name or a named id. See the documentation for details on how this operates.
PENDING=()
USED_RULES=()
function satisfy-target {
    local target="$1"
    local i

    if ! is-id "${target}"; then
        target="$(abs-path "${target}")"
    fi

    # Check for would-be infinite recursion.
    for (( i = 0; i < ${#PENDING[@]}; i++ )); do
        if [[ ${target} == ${PENDING[$i]} ]]; then
            # The target is already in the middle of being satisfied.
            msg --err "Recursive dependency on target: ${target}"
            trace-layers
            return 1
        fi
    done

    local rules=($(rules-for-target "${target}"))

    if [[ ${#rules[@]} == 0 ]]; then
        if [[ ! -e "${target}" ]]; then
            msg --err "No rules defined for non-existent target: ${target}"
            trace-layers
            return 1
        else
            msg --detail "== ${target}"
            return
        fi
    fi

    enter-layer "${target}"
    PENDING+=("${target}")

    local error=0

    for (( i = 0; i < ${#rules[@]}; i++ )); do
        local r="${rules[$i]}"

        if (( error )); then
            break
        elif (( ${USED_RULES[$r]} )); then
            continue
        fi

        while read -r cmd rest; do
            case "${cmd}" in
                (req)
                    satisfy-target "$(unquote "${rest}")"
                    if [[ $? != 0 ]]; then
                        error=1
                        break
                    fi
                    ;;
            esac
        done <<< "${RULES[$r]}"
    done

    for (( i = 0; i < ${#rules[@]}; i++ )); do
        local r="${rules[$i]}"

        if (( error )); then
            break
        elif (( ${USED_RULES[$r]} )); then
            continue
        fi

        run-if-needed "${RULES[$r]}"
        if [[ $? != 0 ]]; then
            error=1
        fi

        USED_RULES[$r]=1
    done

    leave-layer

    unset PENDING[$((${#PENDING[@]} - 1))]

    if (( error )); then
        msg --err "Could not satisfy target: ${target}"
        trace-layers
        return 1
    fi
}


#
# Main script
#

rules-init

for t in "${targets[@]}"; do
    satisfy-target "$t" || exit 1
done
