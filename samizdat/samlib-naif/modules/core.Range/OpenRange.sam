## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `OpenRange` Class
##
## Payload:
##   converter: function
##   increment: int
##   value:     intOrChar

## This file is written in a subset of the language. See spec for details.
#= language core.Lang0

import core.Generator :: unboundedCollect, unboundedFetch, unboundedForEach;

import ./converter :: converterFor;


##
## Class Definition
##

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class OpenRange
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(firstValue, optIncrement?) {
        def increment = If.or { optIncrement* } { 1 };
        def converter = converterFor(Class.of(firstValue));
        def value = Class.typeCast(Int, firstValue);

        return this.(NEW)(@{converter, increment, value})
    };

    ## Documented in spec.
    .collect(optFilterFunction?) {
        ## It is an "unbounded collect" error to call this.
        unboundedCollect(this)
    };

    ## Documented in spec.
    .fetch() {
        ## It is an "unbounded fetch" error to call this.
        unboundedFetch(this)
    };

    ## Documented in spec.
    .forEach(optFilterFunction?) {
        ## It is an "unbounded forEach" error to call this.
        unboundedForEach(this)
    };

    ## Documented in spec.
    .nextValue(box) {
        def increment = this.(ACCESS)(@increment);
        def value = this.(ACCESS)(@value);

        box* := this.(ACCESS)(@converter)(value);
        return this.(NEW)(@{this.(ACCESS)()*, value: value.add(increment)});
    };
};
