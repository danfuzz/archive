## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

## This file is written in a subset of the language. See spec for details.
#= language core.Lang0

import core.Format;

import ./constructors1 :: makeExport;


##
## Private Definitions
##

## Calls the given `resolveFn` on the indicated `source`. Complains if the
## result is void. If the result is non-void, validate that it is a `@module`.
fn resolveAndCheck(resolveFn, source) {
    return If.value { resolveFn(source) }
        { result ->
            If.not { result.hasName(@module) }
                { die("Invalid resolution result (not a `@module`)") };
            result
        }
        { die("Could not resolve import: ", sourceString(source)) }
};

## Gets a printable human string form for the given `source`. This is
## intentionally more verbose than the equivalent (internal) function
## in `core.ModuleSystem`.
fn sourceString(source) {
    If.is { source.hasName(@internal) }
        { return "internal ./".cat(source::name) };
    If.is { source.hasName(@external) }
        { return "external ".cat(source::name) };

    return "weird source ".cat($Format::source(source))
};


##
## Exported Definitions
##

## Documented in spec.
export fn resolveImport(node, resolveFn) {
    return If.cases(
        { node.get_name() },
        @{
            @importModule: { . ->
                ## No need to modify, just validate.
                resolveAndCheck(resolveFn, node::source);
                node
            },

            @importModuleSelection: { . ->
                ## We need to inspect the resolved innards, so keep the
                ## resolved value (unlike the other related functions).
                def resolved = resolveAndCheck(resolveFn, node::source);

                ## Get the `info::exports` out of the resolved result. Default
                ## to `{}` if not present.
                def info = If.or { resolved::info } { {} };
                def exports = If.or { info::exports } { {} };

                If.value { node::select }
                    { select ->
                        ## Explicit selection, so no need to return a modified
                        ## result. Just validate that all selected names are
                        ## available for import.
                        select.collect { one ->
                            If.not { exports.get(one) }
                                {
                                    die("Could not resolve import: ",
                                        sourceString(node::source), " :: ",
                                        Class.typeCast(String, one))
                                }
                        };
                        node
                    }
                    {
                        ## It's a wildcard import, so return a modified node
                        ## that lists all the exported names.
                        def select = exports.keyList();
                        @importModuleSelection{node*, select}
                    }
            },

            @importResource: { . ->
                ## No need to modify, just validate. TODO: Validate.
                node
            }
        })
};

## Documented in spec.
export fn withResolvedImports(node, resolveFn) {
    def converted = node::statements.collect { s /out ->
        var exported = false;
        var defNode = s;
        If.is { s.hasName(@export) }
            {
                exported := true;
                defNode := s::value
            };

        If.or
            { defNode.hasName(@importModule) }
            { defNode.hasName(@importModuleSelection) }
            { defNode.hasName(@importResource) }
            {
                ## Not an `import*` node.
                yield /out s
            };

        def resolved = resolveImport(defNode, resolveFn);

        yield If.is { Cmp.eq(exported, true) }
            { makeExport(resolved) }
            { resolved }
    };

    return node.cat(@{statements: [converted*]})
};
