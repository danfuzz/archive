## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Samizdat Layer 1 tokenizer
##
## The following is a near-transliteration of the token grammar in
## the Samizdat Layer 0 and Samizdat Layer 1 specifications.
##

## This file is written in a subset of the language. See spec for details.
#= language core.Lang0

import core.Generator;
import core.LangNode :: KEYWORDS, intFromDigits;
import core.Peg :: *;


##
## These definitions are meant to mirror the code in the spec for
## tokenization, as closely as possible.
##

## Documented in spec.
def tokWhitespace = PegMain.newSequence(
    PegLookaheadSuccess.new(PegSet.newChars("# \n")),
    PegRepeat.newPlus(
        PegChoice.new(
            PegRepeat.newPlus(PegSet.newChars(" \n")),
            PegSequence.new(
                PegSequence.newString("#"),
                PegSet.newChars("#!="),
                PegRepeat.newStar(PegSetComplement.newChars("\n"))))));

## Documented in spec.
def tokPunctuation = PegMain.newSequence(
    PegLookaheadSuccess.new(
        PegSet.newChars("@:.,=-+?;*/<>{}()[]", "&|!%")),
    PegChoice.new(
        PegSequence.newString("->"),
        PegSequence.newString(":="),
        PegSequence.newString("::"),
        PegSequence.newString(".."),
        PegSequence.newString("{:"),
        PegSequence.newString(":}"),
        any));

## Documented in spec.
def tokDecDigit = PegMain.newSequence(
    PegSet.newChars("_0123456789"));

## Documented in spec.
def tokInt = PegMain.newSequence(
    PegRepeat.newPlus(tokDecDigit),
    PegCode.new { digits -> @int{value: intFromDigits(10, digits)} });

## Documented in spec.
def tokStringPart = PegMain.newChoice(
    PegSequence.new(
        PegRepeat.newPlus(PegSetComplement.newChars("\\\"\n")),
        PegCode.new(stringFromTokenList)),
    PegSequence.new(
        PegSequence.newString("\n"),
        PegRepeat.newStar(PegSequence.newString(" ")),
        PegResult.new("\n")),
    PegSequence.new(
        PegSequence.newString("\\"),
        PegChoice.new(
            PegSequence.new(PegSequence.newString("\\"), PegResult.new("\\")),
            PegSequence.new(PegSequence.newString("\""), PegResult.new("\"")),
            PegSequence.new(PegSequence.newString("n"),  PegResult.new("\n")),
            PegSequence.new(PegSequence.newString("r"),  PegResult.new("\r")),
            PegSequence.new(PegSequence.newString("t"),  PegResult.new("\t")),
            PegSequence.new(PegSequence.newString("0"),  PegResult.new("\0")))));

## Documented in spec.
def tokString = PegMain.newSequence(
    PegSequence.newString("\""),
    PegRepeat.newStar(tokStringPart),
    PegChoice.new(
        PegSequence.new(
            PegSequence.newString("\""),
            PegCode.new { ., parts, . -> @string{value: "".cat(parts*)} }),
        PegCode.new { ., . ->
            @error{value: "Unterminated string literal."}
        }));

## These are all the characters which are allowed to start an identifier.
def IDENTIFIER_START_CHARS =
    "_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

## These are all the characters which are allowed to be in an identifier.
def IDENTIFIER_CHARS = IDENTIFIER_START_CHARS.cat("0123456789");

## Documented in spec.
def tokIdentifier = PegMain.newSequence(
    PegSet.newChars(IDENTIFIER_START_CHARS),
    PegRepeat.newStar(PegSet.newChars(IDENTIFIER_CHARS)),
    PegCode.new { one, rest ->
        def name = symbolFromTokenList([one, rest*]);
        If.or { KEYWORDS.get(name) }
            { @identifier{value: name} }
    });

## Documented in spec.
def tokQuotedIdentifier = PegMain.newSequence(
    PegSequence.newString("\\"),
    tokString,
    PegCode.new { ., s -> @identifier{value: Class.typeCast(Symbol, s::value)} });

## Documented in spec.
def tokError = PegMain.newSequence(
    any,
    PegRepeat.newStar(PegSetComplement.newChars("\n")),
    PegCode.new { badCh, . ->
        def msg = "Unrecognized character: ".cat(badCh.get_name());
        @error{value: msg}
    });

## Documented in spec.
def tokToken = PegMain.newChoice(
    tokString,
    tokIdentifier,
    tokQuotedIdentifier,
    tokPunctuation,
    tokInt,
    tokError);

## Documented in spec.
def tokFile = PegMain.newSequence(
    PegRepeat.newStar(
        PegSequence.new(
            PegRepeat.newOpt(tokWhitespace),
            tokToken)),
    PegRepeat.newOpt(tokWhitespace),
    PegCode.new { tokens, . -> tokens });


##
## Exported Definitions
##

## Documented in spec.
export fn tokenize(programText) {
    return apply(tokFile, programText)
};
