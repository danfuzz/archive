## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## Command line interpreter
##

import core.FilePath;
import core.Format;     ## Implicitly used.
import core.Generator;  ## Implicitly used.
import core.Io0;
import core.ModuleSystem :: run, runFile;
import core.Peg;        ## Implicitly used.
import core.Range;      ## Implicitly used.


##
## Private Definitions
##

## Parses a single `\0`-terminated word. Yields a simple string.
def parWord = {:
    chars = [! "\0"]*
    "\0"
    { $Peg::stringFromTokenList(chars) }
:};

## Parses a key prefix of a word, not including the ending `=`.
def parKey = {:
    chars = [! "=\0"]+
    { $Peg::symbolFromTokenList(chars) }
:};

## Parses a key-value option word. Yields a single-mapping map of
## `{(key): value}`.
def parKeyValue = {:
    "--"
    key = parKey
    "="
    value = parWord
    { {(key): value} }
:};

## Parses a non-value flag option word. Yields a single-mapping map of
## `{(flag): true}`.
def parFlag = {:
    "--"
    flag = parWord

    ## The `!=` rejects plain `--`.
    { (flag != "") & {(flag as Symbol): true} }
:};

## Parses a syntactically invalid option. This includes words that start with
## just a single dash and are not *just* `-` (which is a valid non-option
## argument); as well as options with empty keys (`--=...`).
def parError = {:
    ch1 = "-"
    ch2 = [! "-\0"]
    word = parWord
    {
        def value = "\[stringFromTokens(ch1, ch2), word]";
        note("Unknown option: \%q(value)");
        {error: true}
    }
:};

## Parses and yields an arbitrary option (including errors).
def parOption = {:
    parKeyValue | parFlag | parError
:};

## Parses the entire list of argument words. Yields a map of
## `{options: {k: v, ...}, args: [arg, ...]}`.
def parArguments = {:
    optionList = parOption*
    "--\0"?
    args = parWord*
    {
        def options = {}.cat(optionList*);
        if (options::error) {
            die("Invalid option(s).")
        };
        {options, args}
    }
:};


##
## Exported Definitions
##

## Documented in spec.
export fn parseArgs(args) {
    ## Make a unified string with each argument "\0"-terminated.
    def argString = "\[ arg in args -> [arg, "\0"] ]";

    ## Use the peg grammar above to split the arguments back apart.
    return $Peg::apply(parArguments, argString)
};

## Documented in spec.
export fn runCommandLine(rawArgs*) {
    def parsedArgs = parseArgs(rawArgs);
    def options = parsedArgs::options;
    def argWords = parsedArgs::args;

    def filePath = (def p = argWords[0])
        & $FilePath::fixPath(p, $Io0::cwd())
        | "/dev/stdin";
    def args = argWords[1..] | [];

    ## TODO: These probably don't actually want to refer to `thisLoader`,
    ## as it includes the possibility of loading module-internal files.
    switch ($Io0::fileType(filePath)) {
        @absent: {
            die("No such file or directory: \%q(filePath)")
        };
        @directory: {
            return? run(filePath, thisLoader(), filePath, args*)
        };
        default: {
            return? runFile(filePath, thisLoader(), filePath, args*)
        }
    }
};
