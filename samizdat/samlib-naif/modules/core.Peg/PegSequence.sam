## Copyright 2013-2015 the Samizdat Authors (Dan Bornstein et alia).
## Licensed AS IS and WITHOUT WARRANTY under the Apache License,
## Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

##
## `PegSequence` class
##

## This file is written in a subset of the language. See spec for details.
#= language core.Lang0

import ./PegResult :: *;
import ./PegSet :: *;


##
## Class Definition
##
## Payload: {rules: [rule*]}

## Secrets used to control access to this class.
def ACCESS = @ACCESS.toUnlisted();
def NEW = @NEW.toUnlisted();

export class PegSequence
        access: ACCESS,
        new: NEW {
    ## Documented in spec.
    class.new(rules*) {
        ## Trivial case: No rules. Return the empty rule.
        If.is { Cmp.eq(rules, []) }
            { return empty };

        ## Trivial case: One rule. Return that rule directly.
        If.is { Cmp.eq(rules.get_size(), 1) }
            { return rules* };

        ## The general case.
        return this.(NEW)(@{rules})
    };

    ## Documented in spec.
    class.newString(string) {
        def resultType = Class.typeCast(Symbol, string);

        ## Trivial case: Empty string. Return an always-successful yield of
        ## `@""`.
        If.is { Cmp.eq(string, "") }
            { return PegResult.new(@""{}) };

        ## Trivial case: One-char string. Return a simple one-char rule.
        If.is { Cmp.eq(string.get_size(), 1) }
            { return PegSet.new(resultType) };

        ## This is implemented as, in effect, `(@"1" @"2" ... { string })`,
        ## which allows us to minimize code duplication.

        ## Make a list of rules per character.
        def chars = string.collect { ch -> PegSet.new(Class.typeCast(Symbol, ch)) };

        return this.new(chars*, PegResult.new(@(resultType){}))
    };

    ## Documented in spec.
    .parse(state) {
        ## Each rule after the first gets passed as additional context
        ## the matched results of all the previous rules, in order.

        def origContext = state.get_context();
        var remainingState = state;

        this.(ACCESS)(@rules).forEach { rule ->
            If.value { remainingState.applyRule(rule) }
                { newState -> remainingState := newState }
                {
                    ## Propagate the failure.
                    return
                }
        };

        return remainingState.withContext(
            [origContext*, remainingState.get_context().reverseNth(0)])
    };
};
