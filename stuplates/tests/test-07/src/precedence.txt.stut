${

def x := 0;
def y := 0; 
def arr := ["abe", "boo", "cooties", 3, 4, [5, 6, 7]];

def test (e, good, bad)
{
    if ((e != bad) && (e == good))
    {
        e + " " + bad
    }
    else
    {
        "BOGOSITY: " + e + " " + good + " " + bad
    }
}

def two ()
{
    2
}

def returnArr ()
{
    [0, 1]
}

"Hi!"
}

:=
${ x := y := 2; x + y } 4
${ x := `${y}oo` =~ "zoo"; x + y } 1z
${ `${x}oo` =~ y := "zoo"; x + y } zzoo
${ x := false || true; x } true
${ x := true && false; x } false
${ x := 1 == 1; x } true
${ x := 1 != 1; x } false
${ x := 1 < 2; x } true
${ x := 1 > 2; x } false
${ x := 1 <= 2; x } true
${ x := 1 >= 2; x } false
${ x := 1 & 2; x } 0
${ x := 1 | 2; x } 3
${ x := 1 ^ 2; x } 3
${ x := 1 << 2; x } 4
${ x := 1 >> 2; x } 0
${ x := 1 * 2; x } 2
${ x := 1 / 2; x } 0
${ x := 3 % 2; x } 1
${ x := 3 %% 2; x } 1
${ x := 3 ** 2; x } 6
${ x := + 2; x } 2
${ x := - 2; x } -2
${ x := ! false; x } true
${ x := ~0; x } -1
${ x := strcat ("boo"); x } boo
${ x := arr[1]; x } boo
${ x := x.toString (); x } boo

=~
${ `${x}ue` =~ false || true; x } tr
${ `${x}se` =~ true && false; x } fal
${ `${x}e` =~ 1 == 1; x } tru
${ `${x}se` =~ 1 != 1; x } fal
${ `${x}e` =~ 1 < 2; x } tru
${ `${x}se` =~ 1 > 2; x } fal
${ `${x}e` =~ 1 <= 2; x } tru
${ `${x}se` =~ 1 >= 2; x } fal
${ `3${x}` =~ 160 & 96; x } 2
${ `3${x}` =~ 15 | 16; x } 1
${ `3${x}` =~ 15 ^ 16; x } 1
${ `1${x}` =~ 1 << 4; x } 6
${ `1${x}` =~ 32 >> 1; x } 6
${ `3${x}` =~ 15 * 2; x } 0
${ `5${x}` =~ 100 / 2; x } 0
${ `7${x}` =~ 370 % 99; x } 3
${ `7${x}` =~ 370 %% 99; x } 3
${ `8${x}` =~ 3 ** 4; x } 1
${ `2${x}` =~ + 251; x } 51
${ `-${x}` =~ - 251; x } 251
${ `${x}ue` =~ ! false; x } tr
${ `-${x}` =~ ~0; x } 1
${ `${x}oo` =~ strcat ("boo"); x } b
${ `${x}oo` =~ arr[1]; x } b
${ x := "zorch"; `${x}ch` =~ x.toString (); x } zor

||
${ false || 2 && 3 } 3
${ 0 && 2 || false } false
${ 1 || 0 == 0 } 1
${ 0 == 0 || 1 } true
${ 1 || 2 != 3 } 1
${ 2 != 0 || 2 } true
${ 1 || 2 < 3 } 1
${ -2 < 0 || -3 } true
${ 1 || 3 > 2 } 1
${ 3 > 0 || 4 } true
${ 1 || 2 <= 3 } 1
${ -2 <= 0 || -3 } true
${ 1 || 3 >= 2 } 1
${ 3 >= 0 || 4 } true
${ 1 || 2 & 4 } 1
${ 1 & 2 || 3 } 3
${ 1 || 0 | 4 } 1
${ 1 | 0 || true } 1
${ 1 || 2 ^ 3 } 1
${ 1 ^ 0 || true } 1
${ 1 || 2 << 3 } 1
${ 1 << 0 || true } 1
${ 1 || 2 >> 3 } 1
${ 1 >> 0 || true } 1
${ 1 || 2 + 3 } 1
${ 1 + 0 || 3 } 1
${ 1 || 2 - 3 } 1
${ 1 - 0 || 3 } 1
${ 1 || 2 * 3 } 1
${ 0 * 4 || 3 } 3
${ 1 || 4 / 2 } 1
${ 0 / 4 || 3 } 3
${ 1 || 2 % 3 } 1
${ 0 % 4 || 3 } 3
${ 1 || 2 %% 3 } 1
${ 0 %% 4 || 3 } 3
${ 1 || 2 ** 3 } 1
${ 0 ** 2 || 3 } 3
${ (:boolean: + 0 || 3) } 3
${ - 0 || 3 } 3
${ ! 0 || 3 } true
${ ~ 0 || 3 } -1
${ 3 || strcat ("boo") } 3
${ 3 || arr[1] } 3
${ 1 || 2 . zorch } 1
${ ((System.in || x) != "" ) } true

&&
${ 1 && 2 == 2 } true
${ 1 == 2 && 1 } false
${ 1 && 2 != 1 } true
${ 1 != 1 && 2 } false
${ 3 && 2 < 3 } true
${ 1 < 2 && 1 } 1
${ 2 && 3 > 2 } true
${ 3 > 2 && 3 } 3
${ 3 && 2 <= 3 } true
${ 1 <= 2 && 0 } 0
${ 2 && 3 >= 2 } true
${ 3 >= 2 && 4 } 4
${ 1 && 2 & 3 } 2
${ 2 & 3 && 1 } 1
${ 1 && 2 | 4 } 6
${ 2 | 4 && 1 } 1
${ 1 && 2 ^ 4 } 6
${ 2 ^ 4 && 1 } 1
${ 1 && 2 << 3 } 16
${ 1 << 2 && 3 } 3
${ 1 && 16 >> 2 } 1
${ 16 >> 1 && 2 } 2
${ 1 && 2 + 3 } 5
${ 1 + 2 && 4 } 4
${ 1 && 2 - 3 } -1
${ 1 - 2 && 3 } 3
${ 1 && 2 * 3 } 6
${ 1 * 2 && 3 } 3
${ 1 && 4 / 2 } 2
${ 4 / 2 && 1 } 2
${ 1 && 7 % 10 } 7
${ 7 % 10 && 2 } 2
${ 1 && 7 %% 10 } 7
${ 7 %% 10 && 2 } 2
${ 1 && 2 ** 3 } 8
${ 1 ** 2 && 3 } 3
${ (:boolean: + 1 && 0) } 0
${ - 1 && 2 } 2
${ ! 0 && 2 } 2
${ ~ 0 && 2 } 2
${ 2 && strcat ("boo") } boo
${ 2 && arr[1] } boo
${ (5 && System.in) != "" } true
${ System.in && 5 } 5


==
${ test (true == 2 != false, (true == 2) != false, true == (2 != false)) }
${ test (true == 2 < 3, true == (2 < 3), (true == 2) < 3) }
${ test (true == 2 > 1, true == (2 > 1), (true == 2) > 1) }
${ test (true == 2 <= 3, true == (2 <= 3), (true == 2) <= 3 ) }
${ test (true == 2 >= 1, true == (2 >= 1), (true == 2) >= 1 ) }
${ test (1 == 5 & 3, 1 == (5 & 3), (1 == 5) & 3) }
${ test (1 == 5 | 3, 1 == (5 | 3), (1 == 5) | 3) }
${ test (1 == 5 ^ 3, 1 == (5 ^ 3), (1 == 5) ^ 3) }
${ test ((:int: 8 == 1 << 3), (:int: 8 == (1 << 3)), (:int: (8 == 1) << 3)) }
${ test ((:int: 1 == 8 >> 3), (:int: 1 == (8 >> 3)), (:int: (1 == 8) >> 3)) }
${ test ((:int: 1 == 2 + 3), (:int: 1 == (2 + 3)), (:int: (1 == 2) + 3)) }
${ test ((:int: 1 == 2 - 3), (:int: 1 == (2 - 3)), (:int: (1 == 2) - 3)) }
${ test ((:int: 1 == 2 * 3), (:int: 1 == (2 * 3)), (:int: (1 == 2) * 3)) }
${ test ((:int: 1 == 2 / 3), (:int: 1 == (2 / 3)), (:int: (1 == 2) / 3)) }
${ test ((:int: 1 == 2 % 3), (:int: 1 == (2 % 3)), (:int: (1 == 2) % 3)) }
${ test ((:int: 1 == 2 %% 3), (:int: 1 == (2 %% 3)), (:int: (1 == 2) %% 3)) }
${ test ((:int: 1 == 2 ** 3), (:int: 1 == (2 ** 3)), (:int: (1 == 2) ** 3)) }
${ test (true != 2 == false, (true != 2) == false, true != (2 == false)) }
${ test (2 < 3 == true, (2 < 3) == true, 2 < (3 == true)) }
${ test (2 > 1 == true, (2 > 1) == true, 2 > (1 == true)) }
${ test (2 <= 3 == true, (2 <= 3) == true, 2 <= (3 == true)) }
${ test (2 >= 1 == true, (2 >= 1) == true, 2 >= (1 == true)) }
${ test (1 & 5 == 1, (1 & 5) == 1, 1 & (5 == 1)) }
${ test (1 | 5 == 3, (1 | 5) == 3, 1 | (5 == 3)) }
${ test (1 ^ 5 == 3, (1 ^ 5) == 3, 1 ^ (5 == 3)) }
${ test ((:int: 1 << 3 == 8), (:int: (1 << 3) == 8), (:int: 1 << (3 == 8))) }
${ test ((:int: 8 >> 3 == 1), (:int: (8 >> 3) == 1), (:int: 8 >> (3 == 1))) }
${ test ((:int: 1 + 2 == 3), (:int: (1 + 2) == 3), (:int: 1 + (2 == 3))) }
${ test ((:int: 1 - 2 == 3), (:int: (1 - 2) == 3), (:int: 1 - (2 == 3))) }
${ test ((:int: 1 * 2 == 3), (:int: (1 * 2) == 3), (:int: 1 * (2 == 3))) }
${ test ((:int: 1 / 2 == 2), (:int: (1 / 2) == 2), (:int: 1 / (2 == 2))) }
${ test ((:int: 1 % 2 == 2), (:int: (1 % 2) == 2), (:int: 1 % (2 == 2))) }
${ test ((:int: 1 %% 2 == 2), (:int: (1 %% 2) == 2), (:int: 1 %% (2 == 2))) }
${ test ((:int: 1 ** 2 == 3), (:int: (1 ** 2) == 3), (:int: 1 ** (2 == 3))) }
${ test ((:int: +"1" == 1), (:int: (+"1") == 1), (:int: +("1" == 1))) }
${ test ((:int: -"1" == 1), (:int: (-"1") == 1), (:int: -("1" == 1))) }
${ test (! 0 == 1, (! 0) == 1, ! (0 == 1)) }
${ test ((:int: ~"1" == 1), (:int: (~"1") == 1), (:int: ~("1" == 1))) }
${ "boo" == strcat("boo") } true
${ "boo" == arr[1] } true
${ System.in == 0 } false

!=
${ test (false != 2 < 3, false != (2 < 3), (false != 2) < 3) }
${ test (false != 2 > 1, false != (2 > 1), (false != 2) > 1) }
${ test (false != 2 <= 3, false != (2 <= 3), (false != 2) <= 3) }
${ test (false != 2 >= 1, false != (2 >= 1), (false != 2) >= 1) }
${ test (1 != 5 & 3, 1 != (5 & 3), (1 != 5) & 3) }
${ test (5 != 4 | 1, 5 != (4 | 1), (5 != 4) | 1) }
${ test (1 != 5 ^ 3, 1 != (5 ^ 3), (1 != 5) ^ 3) }
${ test ((:int: 8 != 1 << 3), (:int: 8 != (1 << 3)), (:int: (8 != 1) << 3)) }
${ test ((:int: 1 != 8 >> 3), (:int: 1 != (8 >> 3)), (:int: (1 != 8) >> 3)) }
${ test ((:int: 1 != 2 + 3), (:int: 1 != (2 + 3)), (:int: (1 != 2) + 3)) }
${ test ((:int: 1 != 2 - 3), (:int: 1 != (2 - 3)), (:int: (1 != 2) - 3)) }
${ test ((:int: 1 != 2 * 3), (:int: 1 != (2 * 3)), (:int: (1 != 2) * 3)) }
${ test ((:int: 1 != 2 / 3), (:int: 1 != (2 / 3)), (:int: (1 != 2) / 3)) }
${ test ((:int: 1 != 2 % 3), (:int: 1 != (2 % 3)), (:int: (1 != 2) % 3)) }
${ test ((:int: 1 != 2 %% 3), (:int: 1 != (2 %% 3)), (:int: (1 != 2) %% 3)) }
${ test ((:int: 1 != 2 ** 3), (:int: 1 != (2 ** 3)), (:int: (1 != 2) ** 3)) }
${ test (2 < 3 != false, (2 < 3) != false, 2 < (3 != false)) }
${ test (2 > 1 != false, (2 > 1) != false, 2 > (1 != false)) }
${ test (2 <= 3 != false, (2 <= 3) != false, 2 <= (3 != false)) }
${ test (2 >= 1 != false, (2 >= 1) != false, 2 >= (1 != false)) }
${ test (1 & 5 != 1, (1 & 5) != 1, 1 & (5 != 1)) }
${ test (1 | 5 != 5, (1 | 5) != 5, 1 | (5 != 5)) }
${ test (1 ^ 5 != 3, (1 ^ 5) != 3, 1 ^ (5 != 3)) }
${ test ((:int: 1 << 3 != 8), (:int: (1 << 3) != 8), (:int: 1 << (3 != 8))) }
${ test ((:int: 8 >> 3 != 1), (:int: (8 >> 3) != 1), (:int: 8 >> (3 != 1))) }
${ test ((:int: 1 + 2 != 3), (:int: (1 + 2) != 3), (:int: 1 + (2 != 3))) }
${ test ((:int: 1 - 2 != 3), (:int: (1 - 2) != 3), (:int: 1 - (2 != 3))) }
${ test ((:int: 1 * 2 != 3), (:int: (1 * 2) != 3), (:int: 1 * (2 != 3))) }
${ test ((:int: 1 / 2 != 3), (:int: (1 / 2) != 3), (:int: 1 / (2 != 3))) }
${ test ((:int: 1 % 2 != 3), (:int: (1 % 3) != 2), (:int: 1 % (2 != 3))) }
${ test ((:int: 1 %% 2 != 3), (:int: (1 %% 2) != 3), (:int: 1 %% (2 != 3))) }
${ test ((:int: 1 ** 2 != 3), (:int: (1 ** 2) != 3), (:int: 1 ** (2 != 3))) }
${ test ((:int: +"1" != 1), (:int: (+"1") != 1), (:int: +("1" != 1))) }
${ test ((:int: -"1" != 1), (:int: (-"1") != 1), (:int: -("1" != 1))) }
${ test (! 0 != 1, (! 0) != 1, ! (0 != 1)) }
${ test ((:int: ~"1" != 1), (:int: (~"1") != 1), (:int: ~("1" != 1))) }
${ "boo" != strcat("boo") } false
${ "boo" != arr[1] } false
${ System.in != 0 } true

<
${ test ((:string: true < 2 > 1), 
         (:string: (true < 2) > 1),
         (:string: true < (2 > 1))) }
${ test (false < 2 <= false, (false < 2) <= false, false < (2 <= false)) }
${ test (false < 2 >= false, (false < 2) >= false, false < (2 >= false)) }
${ test (1 < 5 & 3, 1 < (5 & 3), (1 < 5) & 3) }
${ test (5 < 4 | 1, 5 < (4 | 1), (5 < 4) | 1) }
${ test (1 < 5 ^ 3, 1 < (5 ^ 3), (1 < 5) ^ 3) }
${ test ((:int: 8 < 1 << 3), (:int: 8 < (1 << 3)), (:int: (8 < 1) << 3)) }
${ test ((:int: 1 < 8 >> 3), (:int: 1 < (8 >> 3)), (:int: (1 < 8) >> 3)) }
${ test ((:int: 1 < 2 + 3), (:int: 1 < (2 + 3)), (:int: (1 < 2) + 3)) }
${ test ((:int: 1 < 2 - 3), (:int: 1 < (2 - 3)), (:int: (1 < 2) - 3)) }
${ test ((:int: 1 < 2 * 3), (:int: 1 < (2 * 3)), (:int: (1 < 2) * 3)) }
${ test ((:int: 1 < 2 / 3), (:int: 1 < (2 / 3)), (:int: (1 < 2) / 3)) }
${ test ((:int: 1 < 2 % 3), (:int: 1 < (2 % 3)), (:int: (1 < 2) % 3)) }
${ test ((:int: 1 < 2 %% 3), (:int: 1 < (2 %% 3)), (:int: (1 < 2) %% 3)) }
${ test ((:int: 1 < 2 ** 3), (:int: 1 < (2 ** 3)), (:int: (1 < 2) ** 3)) }
${ test ((:string: 2 > 3 < true),
         (:string: (2 > 3) < true),
         (:string: 2 > (3 < true))) }
${ test (false <= false < false, 
         (false <= false) < false, 
         false <= (false < false)) }
${ test (false >= false < false,
         (false >= false) < false,
         false >= (false < false)) }
${ test (1 & 5 < 2, (1 & 5) < 2, 1 & (5 < 2)) }
${ test (1 | 5 < 5, (1 | 5) < 5, 1 | (5 < 5)) }
${ test (1 ^ 5 < 3, (1 ^ 5) < 3, 1 ^ (5 < 3)) }
${ test ((:int: 1 << 3 < 8), (:int: (1 << 3) < 8), (:int: 1 << (3 < 8))) }
${ test ((:int: 8 >> 3 < 1), (:int: (8 >> 3) < 1), (:int: 8 >> (3 < 1))) }
${ test ((:int: 1 + 2 < 3), (:int: (1 + 2) < 3), (:int: 1 + (2 < 3))) }
${ test ((:int: 1 - 2 < 3), (:int: (1 - 2) < 3), (:int: 1 - (2 < 3))) }
${ test ((:int: 1 * 2 < 3), (:int: (1 * 2) < 3), (:int: 1 * (2 < 3))) }
${ test ((:int: 1 / 2 < 3), (:int: (1 / 2) < 3), (:int: 1 / (2 < 3))) }
${ test ((:int: 1 % 2 < 3), (:int: (1 % 3) < 2), (:int: 1 % (2 < 3))) }
${ test ((:int: 1 %% 2 < 3), (:int: (1 %% 2) < 3), (:int: 1 %% (2 < 3))) }
${ test ((:int: 1 ** 2 < 3), (:int: (1 ** 2) < 3), (:int: 1 ** (2 < 3))) }
${ test ((:int: +"1" < 1), (:int: (+"1") < 1), (:int: +("1" < 1))) }
${ test ((:int: -"1" < 1), (:int: (-"1") < 1), (:int: -("1" < 1))) }
${ test (! 0 < 0, (! 0) < 0, ! (0 < 0)) }
${ test ((:int: ~"1" < 1), (:int: (~"1") < 1), (:int: ~("1" < 1))) }
${ "boo" < strcat("boo") } false
${ "boo" < arr[1] } false
${ System.in < 0 } false

>
${ test ((:string: false > 2 <= true), 
         (:string: (false > 2) <= true), 
         (:string: false > (2 <= true))) }
${ test ((:string: false > 2 >= 1),
         (:string: (false > 2) >= 1),
         (:string: false > (2 >= 1))) }
${ test (10 > 5 & 0, 10 > (5 & 0), (10 > 5) & 0) }
${ test (5 > 4 | 1, 5 > (4 | 1), (5 > 4) | 1) }
${ test (1 > 5 ^ 3, 1 > (5 ^ 3), (1 > 5) ^ 3) }
${ test ((:int: 8 > 1 << 3), (:int: 8 > (1 << 3)), (:int: (8 > 1) << 3)) }
${ test ((:int: 1 > 8 >> 3), (:int: 1 > (8 >> 3)), (:int: (1 > 8) >> 3)) }
${ test ((:int: 1 > 2 + 3), (:int: 1 > (2 + 3)), (:int: (1 > 2) + 3)) }
${ test ((:int: 1 > 2 - 3), (:int: 1 > (2 - 3)), (:int: (1 > 2) - 3)) }
${ test ((:int: 1 > 2 * 3), (:int: 1 > (2 * 3)), (:int: (1 > 2) * 3)) }
${ test ((:int: 1 > 2 / 3), (:int: 1 > (2 / 3)), (:int: (1 > 2) / 3)) }
${ test ((:int: 1 > 2 % 3), (:int: 1 > (2 % 3)), (:int: (1 > 2) % 3)) }
${ test ((:int: 1 > 2 %% 3), (:int: 1 > (2 %% 3)), (:int: (1 > 2) %% 3)) }
${ test ((:int: 1 > 2 ** 3), (:int: 1 > (2 ** 3)), (:int: (1 > 2) ** 3)) }
${ test ((:string: 2 <= 3 > true),
         (:string: (2 <= 3) > true),
         (:string: 2 <= (3 > true))) }
${ test ((:string: 2 >= 1 > false),
         (:string: (2 >= 1) > false),
         (:string: 2 >= (1 > false))) }
${ test (1 & 5 > 1, (1 & 5) > 1, 1 & (5 > 1)) }
${ test (1 | 5 > 5, (1 | 5) > 5, 1 | (5 > 5)) }
${ test (1 ^ 5 > 3, (1 ^ 5) > 3, 1 ^ (5 > 3)) }
${ test ((:int: 1 << 3 > 8), (:int: (1 << 3) > 8), (:int: 1 << (3 > 8))) }
${ test ((:int: 8 >> 3 > 1), (:int: (8 >> 3) > 1), (:int: 8 >> (3 > 1))) }
${ test ((:int: 1 + 2 > 3), (:int: (1 + 2) > 3), (:int: 1 + (2 > 3))) }
${ test ((:int: 1 - 2 > 3), (:int: (1 - 2) > 3), (:int: 1 - (2 > 3))) }
${ test ((:int: 1 * 2 > 3), (:int: (1 * 2) > 3), (:int: 1 * (2 > 3))) }
${ test ((:int: 1 / 2 > 1), (:int: (1 / 2) > 1), (:int: 1 / (2 > 1))) }
${ test ((:int: 1 % 2 > 1), (:int: (1 % 3) > 1), (:int: 1 % (2 > 1))) }
${ test ((:int: 1 %% 2 > 1), (:int: (1 %% 2) > 1), (:int: 1 %% (2 > 1))) }
${ test ((:int: 1 ** 2 > 1), (:int: (1 ** 2) > 1), (:int: 1 ** (2 > 1))) }
${ test ((:int: +"1" > 1), (:int: (+"1") > 1), (:int: +("1" > 1))) }
${ test ((:int: -"1" > 1), (:int: (-"1") > 1), (:int: -("1" > 1))) }
${ test (! 0 > 1, (! 0) > 1, ! (0 > 1)) }
${ test ((:int: ~"1" > 1), (:int: (~"1") > 1), (:int: ~("1" > 1))) }
${ "boo" > strcat("boo") } false
${ "boo" > arr[1] } false
${ System.in > 0 } false

<=
${ test ((:string: false <= 2 >= true),
         (:string: (false <= 2) >= true),
         (:string: false <= (2 >= true))) }
${ test (false <= 5 & false, false <= (5 & false), (false <= 5) & false) }
${ test (5 <= 0 | 1, 5 <= (0 | 1), (0 <= 4) | 1) }
${ test (1 <= 5 ^ 3, 1 <= (5 ^ 3), (1 <= 5) ^ 3) }
${ test ((:int: 8 <= 1 << 3), (:int: 8 <= (1 << 3)), (:int: (8 <= 1) << 3)) }
${ test ((:int: 1 <= 8 >> 3), (:int: 1 <= (8 >> 3)), (:int: (1 <= 8) >> 3)) }
${ test ((:int: 1 <= 2 + 3), (:int: 1 <= (2 + 3)), (:int: (1 <= 2) + 3)) }
${ test ((:int: 1 <= 2 - 3), (:int: 1 <= (2 - 3)), (:int: (1 <= 2) - 3)) }
${ test ((:int: 1 <= 2 * 3), (:int: 1 <= (2 * 3)), (:int: (1 <= 2) * 3)) }
${ test ((:int: 1 <= 2 / 3), (:int: 1 <= (2 / 3)), (:int: (1 <= 2) / 3)) }
${ test ((:int: 1 <= 2 % 3), (:int: 1 <= (2 % 3)), (:int: (1 <= 2) % 3)) }
${ test ((:int: 1 <= 2 %% 3), (:int: 1 <= (2 %% 3)), (:int: (1 <= 2) %% 3)) }
${ test ((:int: 1 <= 2 ** 3), (:int: 1 <= (2 ** 3)), (:int: (1 <= 2) ** 3)) }
${ test ((:string: 2 >= 3 <= false),
         (:string: (2 >= 3) <= false),
         (:string: 2 >= (3 <= false))) }
${ test (1 & 5 <= 1, (1 & 5) <= 1, 1 & (5 <= 1)) }
${ test (1 | 3 <= 1, (1 | 3) <= 1, 1 | (3 <= 1)) }
${ test (1 ^ 5 <= 3, (1 ^ 5) <= 3, 1 ^ (5 <= 3)) }
${ test ((:int: 1 << 3 <= 8), (:int: (1 << 3) <= 8), (:int: 1 << (3 <= 8))) }
${ test ((:int: 8 >> 3 <= 1), (:int: (8 >> 3) <= 1), (:int: 8 >> (3 <= 1))) }
${ test ((:int: 1 + 2 <= 3), (:int: (1 + 2) <= 3), (:int: 1 + (2 <= 3))) }
${ test ((:int: 1 - 2 <= 3), (:int: (1 - 2) <= 3), (:int: 1 - (2 <= 3))) }
${ test ((:int: 1 * 2 <= 3), (:int: (1 * 2) <= 3), (:int: 1 * (2 <= 3))) }
${ test ((:int: 1 / 2 <= 3), (:int: (1 / 2) <= 3), (:int: 1 / (2 <= 3))) }
${ test ((:int: 1 % 2 <= 3), (:int: (1 % 3) <= 2), (:int: 1 % (2 <= 3))) }
${ test ((:int: 1 %% 2 <= 3), (:int: (1 %% 2) <= 3), (:int: 1 %% (2 <= 3))) }
${ test ((:int: 1 ** 2 <= 3), (:int: (1 ** 2) <= 3), (:int: 1 ** (2 <= 3))) }
${ test ((:int: +"1" <= 1), (:int: (+"1") <= 1), (:int: +("1" <= 1))) }
${ test ((:int: -"1" <= 1), (:int: (-"1") <= 1), (:int: -("1" <= 1))) }
${ test (! 1 <= 0, (! 1) <= 0, ! (1 <= 0)) }
${ test ((:int: ~"1" <= 1), (:int: (~"1") <= 1), (:int: ~("1" <= 1))) }
${ "boo" <= strcat("boo") } true
${ "boo" <= arr[1] } true
${ System.in <= 0 } false

>=
${ test (1 >= 5 & 3, 1 >= (5 & 3), (1 >= 5) & 3) }
${ test (5 >= 6 | true, 5 >= (6 | true), (5 >= 6) | true) }
${ test (1 >= 5 ^ 3, 1 >= (5 ^ 3), (1 >= 5) ^ 3) }
${ test ((:int: 8 >= 1 << 3), (:int: 8 >= (1 << 3)), (:int: (8 >= 1) << 3)) }
${ test ((:int: 1 >= 8 >> 3), (:int: 1 >= (8 >> 3)), (:int: (1 >= 8) >> 3)) }
${ test ((:int: 1 >= 2 + 3), (:int: 1 >= (2 + 3)), (:int: (1 >= 2) + 3)) }
${ test ((:int: 1 >= 2 - 3), (:int: 1 >= (2 - 3)), (:int: (1 >= 2) - 3)) }
${ test ((:int: 1 >= 2 * 3), (:int: 1 >= (2 * 3)), (:int: (1 >= 2) * 3)) }
${ test ((:int: 1 >= 2 / 3), (:int: 1 >= (2 / 3)), (:int: (1 >= 2) / 3)) }
${ test ((:int: 1 >= 2 % 3), (:int: 1 >= (2 % 3)), (:int: (1 >= 2) % 3)) }
${ test ((:int: 1 >= 2 %% 3), (:int: 1 >= (2 %% 3)), (:int: (1 >= 2) %% 3)) }
${ test ((:int: 1 >= 2 ** 3), (:int: 1 >= (2 ** 3)), (:int: (1 >= 2) ** 3)) }
${ test (0 & false >= false, (0 & false) >= false, 0 & (false >= false)) }
${ test (1 | 3 >= 5, (1 | 3) >= 5, 1 | (3 >= 5)) }
${ test (1 ^ 5 >= 3, (1 ^ 5) >= 3, 1 ^ (5 >= 3)) }
${ test ((:int: 1 << 3 >= 8), (:int: (1 << 3) >= 8), (:int: 1 << (3 >= 8))) }
${ test ((:int: 8 >> 3 >= 1), (:int: (8 >> 3) >= 1), (:int: 8 >> (3 >= 1))) }
${ test ((:int: 1 + 2 >= 3), (:int: (1 + 2) >= 3), (:int: 1 + (2 >= 3))) }
${ test ((:int: 1 - 2 >= 3), (:int: (1 - 2) >= 3), (:int: 1 - (2 >= 3))) }
${ test ((:int: 1 * 2 >= 3), (:int: (1 * 2) >= 3), (:int: 1 * (2 >= 3))) }
${ test ((:int: 1 / 2 >= 1), (:int: (1 / 2) >= 1), (:int: 1 / (2 >= 1))) }
${ test ((:int: 1 % 2 >= 1), (:int: (1 % 3) >= 1), (:int: 1 % (2 >= 1))) }
${ test ((:int: 1 %% 2 >= 1), (:int: (1 %% 2) >= 1), (:int: 1 %% (2 >= 1))) }
${ test ((:int: 1 ** 2 >= 3), (:int: (1 ** 2) >= 3), (:int: 1 ** (2 >= 3))) }
${ test ((:int: +"1" >= 1), (:int: (+"1") >= 1), (:int: +("1" >= 1))) }
${ test ((:int: -"1" >= 1), (:int: (-"1") >= 1), (:int: -("1" >= 1))) }
${ test (! 0 >= 1, (! 0) >= 1, ! (0 >= 1)) }
${ test ((:int: ~"1" >= 1), (:int: (~"1") >= 1), (:int: ~("1" >= 1))) }
${ "boo" >= strcat("boo") } true
${ "boo" >= arr[1] } true
${ System.in >= 0 } false

&
${ test (5 & 4 | 19, (5 & 4) | 19, 5 & (4 | 19)) }
${ test (1 & 5 ^ 17, (1 & 5) ^ 17, 1 & (5 ^ 17)) }
${ test (8 & 1 << 3, 8 & (1 << 3), (8 & 1) << 3) }
${ test (1 & 8 >> 3, 1 & (8 >> 3), (1 & 8) >> 3) }
${ test (1 & 2 + 3, 1 & (2 + 3), (1 & 2) + 3) }
${ test (1 & 2 - 3, 1 & (2 - 3), (1 & 2) - 3) }
${ test (12 & 2 * 3, 12 & (2 * 3), (12 & 2) * 3) }
${ test (55 & 29 / 3, 55 & (29 / 3), (55 & 29) / 3) }
${ test (55 & 29 % 3, 55 & (29 % 3), (55 & 29) % 3) }
${ test (15 & 29 %% 3, 15 & (29 %% 3), (15 & 29) %% 3) }
${ test (15 & 2 ** 7, 15 & (2 ** 7), (15 & 2) ** 7) }
${ test (3 | 4 & 5, (3 | 4) & 5, 3 | (4 & 5)) }
${ test (2 ^ 6 & 5, (2 ^ 6) & 5, 2 ^ (6 & 5)) }
${ test (1 << 3 & 8, (1 << 3) & 8, 1 << (3 & 8)) }
${ test (8 >> 3 & 1, (8 >> 3) & 1, 8 >> (3 & 1)) }
${ test (7 + 4 & 3, (7 + 4) & 3, 7 + (4 & 3)) }
${ test (1 - 2 & 3, (1 - 2) & 3, 1 - (2 & 3)) }
${ test (7 * 2 & 3, (7 * 2) & 3, 7 * (2 & 3)) }
${ test (7 / 3 & 93, (7 / 3) & 93, 7 / (3 & 93)) }
${ test (7 % 3 & 93, (7 % 3) & 93, 7 % (3 & 93)) }
${ test (7 %% 3 & 93, (7 %% 3) & 93, 7 %% (3 & 93)) }
${ test (2 ** 3 & 93, (2 ** 3) & 93, 2 ** (3 & 93)) }
${ test (-1 & 1, (-1) & 1, -(1 & 1)) }
${ test (! false & false, (! false) & false, ! (false & false)) }
${ test (~1 & 1, (~1) & 1, ~(1 & 1)) }
${ "boo" & strcat("boo") } true
${ "boo" & arr[1] } true
${ System.in & 0 } false

|
${ test (1 | 5 ^ 17, (1 | 5) ^ 17, 1 | (5 ^ 17)) }
${ test (8 | 1 << 3, 8 | (1 << 3), (8 | 1) << 3) }
${ test (4 | 8 >> 3, 4 | (8 >> 3), (4 | 8) >> 3) }
${ test (1 | 2 + 3, 1 | (2 + 3), (1 | 2) + 3) }
${ test (1 | 2 - 3, 1 | (2 - 3), (1 | 2) - 3) }
${ test (12 | 2 * 3, 12 | (2 * 3), (12 | 2) * 3) }
${ test (55 | 29 / 3, 55 | (29 / 3), (55 | 29) / 3) }
${ test (55 | 29 % 3, 55 | (29 % 3), (55 | 29) % 3) }
${ test (15 | 29 %% 3, 15 | (29 %% 3), (15 | 29) %% 3) }
${ test (15 | 2 ** 7, 15 | (2 ** 7), (15 | 2) ** 7) }
${ test (3 ^ 6 | 5, (3 ^ 6) | 5, 3 ^ (6 | 5)) }
${ test (1 << 3 | 8, (1 << 3) | 8, 1 << (3 | 8)) }
${ test (8 >> 3 | 2, (8 >> 3) | 2, 8 >> (3 | 2)) }
${ test (7 + 4 | 3, (7 + 4) | 3, 7 + (4 | 3)) }
${ test (1 - 2 | 3, (1 - 2) | 3, 1 - (2 | 3)) }
${ test (7 * 2 | 3, (7 * 2) | 3, 7 * (2 | 3)) }
${ test (7 / 3 | 93, (7 / 3) | 93, 7 / (3 | 93)) }
${ test (7 % 3 | 93, (7 % 3) | 93, 7 % (3 | 93)) }
${ test (7 %% 3 | 93, (7 %% 3) | 93, 7 %% (3 | 93)) }
${ test (2 ** 3 | 93, (2 ** 3) | 93, 2 ** (3 | 93)) }
${ test (-1 | 2, (-1) | 2, -(1 | 2)) }
${ test (! false | true, (! false) | true, ! (false | true)) }
${ test (~1 | 1, (~1) | 1, ~(1 | 1)) }
${ "boo" | strcat("boo") } true
${ "boo" | arr[1] } true
${ System.in | 0 } true

^
${ test (8 ^ 1 << 3, 8 ^ (1 << 3), (8 ^ 1) << 3) }
${ test (4 ^ 8 >> 3, 4 ^ (8 >> 3), (4 ^ 8) >> 3) }
${ test (1 ^ 2 + 3, 1 ^ (2 + 3), (1 ^ 2) + 3) }
${ test (1 ^ 2 - 3, 1 ^ (2 - 3), (1 ^ 2) - 3) }
${ test (12 ^ 2 * 3, 12 ^ (2 * 3), (12 ^ 2) * 3) }
${ test (55 ^ 29 / 3, 55 ^ (29 / 3), (55 ^ 29) / 3) }
${ test (55 ^ 29 % 3, 55 ^ (29 % 3), (55 ^ 29) % 3) }
${ test (15 ^ 29 %% 3, 15 ^ (29 %% 3), (15 ^ 29) %% 3) }
${ test (15 ^ 2 ** 7, 15 ^ (2 ** 7), (15 ^ 2) ** 7) }
${ test (1 << 3 ^ 8, (1 << 3) ^ 8, 1 << (3 ^ 8)) }
${ test (8 >> 3 ^ 2, (8 >> 3) ^ 2, 8 >> (3 ^ 2)) }
${ test (7 + 4 ^ 3, (7 + 4) ^ 3, 7 + (4 ^ 3)) }
${ test (1 - 2 ^ 3, (1 - 2) ^ 3, 1 - (2 ^ 3)) }
${ test (7 * 2 ^ 3, (7 * 2) ^ 3, 7 * (2 ^ 3)) }
${ test (7 / 3 ^ 93, (7 / 3) ^ 93, 7 / (3 ^ 93)) }
${ test (7 % 3 ^ 93, (7 % 3) ^ 93, 7 % (3 ^ 93)) }
${ test (7 %% 3 ^ 93, (7 %% 3) ^ 93, 7 %% (3 ^ 93)) }
${ test (2 ** 3 ^ 93, (2 ** 3) ^ 93, 2 ** (3 ^ 93)) }
${ test (-1 ^ 3, (-1) ^ 3, -(1 ^ 3)) }
${ "boo" ^ strcat("boo") } true
${ "boo" ^ arr[1] } true
${ System.in ^ 0 } true

<<
${ test (1 << 8 >> 3, (1 << 8) >> 3, 1 << (8 >> 3)) }
${ test (1 << 2 + 3, 1 << (2 + 3), (1 << 2) + 3) }
${ test (1 << 2 - 3, 1 << (2 - 3), (1 << 2) - 3) }
${ test (12 << 2 * 3, 12 << (2 * 3), (12 << 2) * 3) }
${ test (55 << 29 / 3, 55 << (29 / 3), (55 << 29) / 3) }
${ test (55 << 29 % 3, 55 << (29 % 3), (55 << 29) % 3) }
${ test (15 << 29 %% 3, 15 << (29 %% 3), (15 << 29) %% 3) }
${ test (15 << 2 ** 7, 15 << (2 ** 7), (15 << 2) ** 7) }
${ test (8 >> 3 << 1, (8 >> 3) << 1, 8 >> (3 << 1)) }
${ test (7 + 4 << 3, (7 + 4) << 3, 7 + (4 << 3)) }
${ test (1 - 2 << 3, (1 - 2) << 3, 1 - (2 << 3)) }
${ test (7 * 5 << -3, (7 * 5) << -3, 7 * (5 << -3)) }
${ test (7 / 3 << 93, (7 / 3) << 93, 7 / (3 << 93)) }
${ test (7 % 3 << 93, (7 % 3) << 93, 7 % (3 << 93)) }
${ test (7 %% 3 << 93, (7 %% 3) << 93, 7 %% (3 << 93)) }
${ test (2 ** 3 << 4, (2 ** 3) << 4, 2 ** (3 << 4)) }
${ test (-1 << -4, (-1) << -4, -(1 << -4)) }
${ test (~1 << 1, (~1) << 1, ~(1 << 1)) }
${ 1 << two() } 4
${ 1 << arr[4] } 16

>>
${ test (1 >> 2 + 3, 1 >> (2 + 3), (1 >> 2) + 3) }
${ test (1 >> 2 - 3, 1 >> (2 - 3), (1 >> 2) - 3) }
${ test (12 >> 2 * 3, 12 >> (2 * 3), (12 >> 2) * 3) }
${ test (55 >> 29 / 29, 55 >> (29 / 29), (55 >> 29) / 29) }
${ test (55 >> 29 % 3, 55 >> (29 % 3), (55 >> 29) % 3) }
${ test (15 >> 29 %% 3, 15 >> (29 %% 3), (15 >> 29) %% 3) }
${ test (15 >> 2 ** 7, 15 >> (2 ** 7), (15 >> 2) ** 7) }
${ test (7 + 4 >> 3, (7 + 4) >> 3, 7 + (4 >> 3)) }
${ test (1 - 2 >> 3, (1 - 2) >> 3, 1 - (2 >> 3)) }
${ test (7 * 2 >> 3, (7 * 2) >> 3, 7 * (2 >> 3)) }
${ test (7 / 3 >> 1, (7 / 3) >> 1, 7 / (3 >> 1)) }
${ test (7 % 3 >> -1, (7 % 3) >> -1, 7 % (3 >> -1)) }
${ test (7 %% 3 >> -1, (7 %% 3) >> -1, 7 %% (3 >> -1)) }
${ test (2 ** 3 >> 93, (2 ** 3) >> 93, 2 ** (3 >> 93)) }
${ test (-1 >> 3, (-1) >> 3, -(1 >> 3)) }
${ 1 >> two() } 0
${ 1 >> arr[4] } 0

+
${ test (12 + 2 * 3, 12 + (2 * 3), (12 + 2) * 3) }
${ test (55 + 29 / 29, 55 + (29 / 29), (55 + 29) / 29) }
${ test (55 + 29 % 3, 55 + (29 % 3), (55 + 29) % 3) }
${ test (15 + 29 %% 3, 15 + (29 %% 3), (15 + 29) %% 3) }
${ test (15 + 2 ** 7, 15 + (2 ** 7), (15 + 2) ** 7) }
${ test (7 * 2 + 3, (7 * 2) + 3, 7 * (2 + 3)) }
${ test (7 / 3 + 1, (7 / 3) + 1, 7 / (3 + 1)) }
${ test (7 % 3 + 1, (7 % 3) + 1, 7 % (3 + 1)) }
${ test (7 %% 3 + 1, (7 %% 3) + 1, 7 %% (3 + 1)) }
${ test (2 ** 3 + 93, (2 ** 3) + 93, 2 ** (3 + 93)) }
${ test (-1 + 3, (-1) + 3, -(1 + 3)) }
${ 1 + two() } 3
${ 1 + arr[4] } 5

-
${ test (12 - 2 * 3, 12 - (2 * 3), (12 - 2) * 3) }
${ test (55 - 29 / 29, 55 - (29 / 29), (55 - 29) / 29) }
${ test (55 - 29 % 3, 55 - (29 % 3), (55 - 29) % 3) }
${ test (15 - 29 %% 3, 15 - (29 %% 3), (15 - 29) %% 3) }
${ test (15 - 2 ** 7, 15 - (2 ** 7), (15 - 2) ** 7) }
${ test (7 * 2 - 3, (7 * 2) - 3, 7 * (2 - 3)) }
${ test (7 / 3 - 1, (7 / 3) - 1, 7 / (3 - 1)) }
${ test (7 % 3 - 1, (7 % 3) - 1, 7 % (3 - 1)) }
${ test (7 %% 3 - 1, (7 %% 3) - 1, 7 %% (3 - 1)) }
${ test (2 ** 3 - 1, (2 ** 3) - 1, 2 ** (3 - 1)) }
${ test (-1 - 3, (-1) - 3, -(1 - 3)) }
${ 1 - two() } -1
${ 1 - arr[4] } -3

*
${ test (55 * 29 / 32, (55 * 29) / 32, 55 * (29 / 32)) }
${ test (55 * 29 % 3, (55 * 29) % 3, 55 * (29 % 3)) }
${ test (15 * 29 %% 3, (15 * 29) %% 3, 15 * (29 %% 3)) }
${ test (15 * 2 ** 7, 15 * (2 ** 7), (15 * 2) ** 7) }
${ test (7 / 3 * 4, (7 / 3) * 4, 7 / (3 * 4)) }
${ test (7 % 3 * 4, (7 % 3) * 4, 7 % (3 * 4)) }
${ test (7 %% 3 * 4, (7 %% 3) * 4, 7 %% (3 * 4)) }
${ test (2 ** 3 * 9, (2 ** 3) * 9, 2 ** (3 * 9)) }
${ test (~1 * 3, (~1) * 3, ~(1 * 3)) }
${ 1 * two() } 2
${ 1 * arr[4] } 4

/
${ test (55 / 29 % 3, (55 / 29) % 3, 55 / (29 % 3)) }
${ test (15 / 29 %% 3, (15 / 29) %% 3, 15 / (29 %% 3)) }
${ test (15 / 2 ** 7, 15 / (2 ** 7), (15 / 2) ** 7) }
${ test (70 % 32 / 3, (70 % 32) / 3, 70 % (32 / 3)) }
${ test (70 %% 32 / 3, (70 %% 32) / 3, 70 %% (32 / 3)) }
${ test (2 ** 3 / 9, (2 ** 3) / 9, 2 ** (3 / 9)) }
${ test (~1 / 3, (~1) / 3, ~(1 / 3)) }
${ 1 / two() } 0
${ 1 / arr[4] } 0

%
${ test (-15 % 29 %% 3, (-15 % 29) %% 3, -15 % (29 %% 3)) }
${ test (-15 % 2 ** 7, -15 % (2 ** 7), (-15 % 2) ** 7) }
${ test (-70 %% 32 % 3, (-70 %% 32) % 3, -70 %% (32 % 3)) }
${ test (2 ** 3 % 3, (2 ** 3) % 3, 2 ** (3 % 3)) }
${ 1 % two() } 1
${ 1 % arr[4] } 1

%%
${ test (-15 %% 2 ** 7, -15 %% (2 ** 7), (-15 %% 2) ** 7) }
${ test (2 ** 3 %% 3, (2 ** 3) %% 3, 2 ** (3 %% 3)) }
${ test (~1 %% 3, (~1) %% 3, ~(1 %% 3)) }
${ 1 %% two() } 1
${ 1 %% arr[4] } 1

**
${ test (-1 ** 4, (-1) ** 4, -(1 ** 4)) }
${ test (~1 ** 3, (~1) ** 3, ~(1 ** 3)) }
${ 1 ** two() } 1
${ 1 ** arr[4] } 1

unary + - ! ~
${ + 1 } 1
${ - 1 } -1
${ ~ 1 } -2
${ ! 1 } false
${ + + 1 } 1
${ + - 1 } -1
${ + ~ 1 } -2
${ + ! 1 } false
${ - + 1 } -1
${ - - 1 } 1
${ - ~ 1 } 2
${ ~ + 1 } -2
${ ~ - 1 } 2
${ ~ ~ 1 } 1
${ ~ ! 1 } true
${ ! + 1 } false
${ ! - 1 } false
${ ! ~ 1 } false
${ ! ! 1 } true
${ !+-~0 } false
${ ! 0 . toString () }

unary (...) [...]
${ arr[4] } 4
${ arr[5][0] } 5
${ returnArr () [1] } 1
