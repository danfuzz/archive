

Terminals which are not used:

   LEXERROR


Conflict in state 86 between rule 28 and token BOR resolved as reduce.
Conflict in state 86 between rule 28 and token BAND resolved as shift.
Conflict in state 86 between rule 28 and token EQOP resolved as shift.
Conflict in state 86 between rule 28 and token ORDOP resolved as shift.
Conflict in state 86 between rule 28 and token LOGOP resolved as shift.
Conflict in state 86 between rule 28 and token SHIFTOP resolved as shift.
Conflict in state 86 between rule 28 and token MINUS resolved as shift.
Conflict in state 86 between rule 28 and token PLUS resolved as shift.
Conflict in state 86 between rule 28 and token MULOP resolved as shift.
Conflict in state 86 between rule 28 and token POWER resolved as shift.
Conflict in state 87 between rule 27 and token BOR resolved as reduce.
Conflict in state 87 between rule 27 and token BAND resolved as reduce.
Conflict in state 87 between rule 27 and token EQOP resolved as shift.
Conflict in state 87 between rule 27 and token ORDOP resolved as shift.
Conflict in state 87 between rule 27 and token LOGOP resolved as shift.
Conflict in state 87 between rule 27 and token SHIFTOP resolved as shift.
Conflict in state 87 between rule 27 and token MINUS resolved as shift.
Conflict in state 87 between rule 27 and token PLUS resolved as shift.
Conflict in state 87 between rule 27 and token MULOP resolved as shift.
Conflict in state 87 between rule 27 and token POWER resolved as shift.
Conflict in state 88 between rule 25 and token BOR resolved as reduce.
Conflict in state 88 between rule 25 and token BAND resolved as reduce.
Conflict in state 88 between rule 25 and token EQOP resolved as reduce.
Conflict in state 88 between rule 25 and token ORDOP resolved as shift.
Conflict in state 88 between rule 25 and token LOGOP resolved as shift.
Conflict in state 88 between rule 25 and token SHIFTOP resolved as shift.
Conflict in state 88 between rule 25 and token MINUS resolved as shift.
Conflict in state 88 between rule 25 and token PLUS resolved as shift.
Conflict in state 88 between rule 25 and token MULOP resolved as shift.
Conflict in state 88 between rule 25 and token POWER resolved as shift.
Conflict in state 89 between rule 24 and token BOR resolved as reduce.
Conflict in state 89 between rule 24 and token BAND resolved as reduce.
Conflict in state 89 between rule 24 and token EQOP resolved as reduce.
Conflict in state 89 between rule 24 and token ORDOP resolved as reduce.
Conflict in state 89 between rule 24 and token LOGOP resolved as shift.
Conflict in state 89 between rule 24 and token SHIFTOP resolved as shift.
Conflict in state 89 between rule 24 and token MINUS resolved as shift.
Conflict in state 89 between rule 24 and token PLUS resolved as shift.
Conflict in state 89 between rule 24 and token MULOP resolved as shift.
Conflict in state 89 between rule 24 and token POWER resolved as shift.
Conflict in state 90 between rule 26 and token BOR resolved as reduce.
Conflict in state 90 between rule 26 and token BAND resolved as reduce.
Conflict in state 90 between rule 26 and token EQOP resolved as reduce.
Conflict in state 90 between rule 26 and token ORDOP resolved as reduce.
Conflict in state 90 between rule 26 and token LOGOP resolved as reduce.
Conflict in state 90 between rule 26 and token SHIFTOP resolved as shift.
Conflict in state 90 between rule 26 and token MINUS resolved as shift.
Conflict in state 90 between rule 26 and token PLUS resolved as shift.
Conflict in state 90 between rule 26 and token MULOP resolved as shift.
Conflict in state 90 between rule 26 and token POWER resolved as shift.
Conflict in state 91 between rule 23 and token BOR resolved as reduce.
Conflict in state 91 between rule 23 and token BAND resolved as reduce.
Conflict in state 91 between rule 23 and token EQOP resolved as reduce.
Conflict in state 91 between rule 23 and token ORDOP resolved as reduce.
Conflict in state 91 between rule 23 and token LOGOP resolved as reduce.
Conflict in state 91 between rule 23 and token SHIFTOP resolved as reduce.
Conflict in state 91 between rule 23 and token MINUS resolved as shift.
Conflict in state 91 between rule 23 and token PLUS resolved as shift.
Conflict in state 91 between rule 23 and token MULOP resolved as shift.
Conflict in state 91 between rule 23 and token POWER resolved as shift.
Conflict in state 92 between rule 22 and token BOR resolved as reduce.
Conflict in state 92 between rule 22 and token BAND resolved as reduce.
Conflict in state 92 between rule 22 and token EQOP resolved as reduce.
Conflict in state 92 between rule 22 and token ORDOP resolved as reduce.
Conflict in state 92 between rule 22 and token LOGOP resolved as reduce.
Conflict in state 92 between rule 22 and token SHIFTOP resolved as reduce.
Conflict in state 92 between rule 22 and token MINUS resolved as reduce.
Conflict in state 92 between rule 22 and token PLUS resolved as reduce.
Conflict in state 92 between rule 22 and token MULOP resolved as shift.
Conflict in state 92 between rule 22 and token POWER resolved as shift.
Conflict in state 93 between rule 21 and token BOR resolved as reduce.
Conflict in state 93 between rule 21 and token BAND resolved as reduce.
Conflict in state 93 between rule 21 and token EQOP resolved as reduce.
Conflict in state 93 between rule 21 and token ORDOP resolved as reduce.
Conflict in state 93 between rule 21 and token LOGOP resolved as reduce.
Conflict in state 93 between rule 21 and token SHIFTOP resolved as reduce.
Conflict in state 93 between rule 21 and token MINUS resolved as reduce.
Conflict in state 93 between rule 21 and token PLUS resolved as reduce.
Conflict in state 93 between rule 21 and token MULOP resolved as shift.
Conflict in state 93 between rule 21 and token POWER resolved as shift.
Conflict in state 94 between rule 20 and token BOR resolved as reduce.
Conflict in state 94 between rule 20 and token BAND resolved as reduce.
Conflict in state 94 between rule 20 and token EQOP resolved as reduce.
Conflict in state 94 between rule 20 and token ORDOP resolved as reduce.
Conflict in state 94 between rule 20 and token LOGOP resolved as reduce.
Conflict in state 94 between rule 20 and token SHIFTOP resolved as reduce.
Conflict in state 94 between rule 20 and token MINUS resolved as reduce.
Conflict in state 94 between rule 20 and token PLUS resolved as reduce.
Conflict in state 94 between rule 20 and token MULOP resolved as reduce.
Conflict in state 94 between rule 20 and token POWER resolved as shift.
Conflict in state 95 between rule 19 and token BOR resolved as reduce.
Conflict in state 95 between rule 19 and token BAND resolved as reduce.
Conflict in state 95 between rule 19 and token EQOP resolved as reduce.
Conflict in state 95 between rule 19 and token ORDOP resolved as reduce.
Conflict in state 95 between rule 19 and token LOGOP resolved as reduce.
Conflict in state 95 between rule 19 and token SHIFTOP resolved as reduce.
Conflict in state 95 between rule 19 and token MINUS resolved as reduce.
Conflict in state 95 between rule 19 and token PLUS resolved as reduce.
Conflict in state 95 between rule 19 and token MULOP resolved as reduce.
Conflict in state 95 between rule 19 and token POWER resolved as reduce.
Conflict in state 96 between rule 13 and token BOR resolved as shift.
Conflict in state 96 between rule 13 and token BAND resolved as shift.
Conflict in state 96 between rule 13 and token EQOP resolved as shift.
Conflict in state 96 between rule 13 and token ORDOP resolved as shift.
Conflict in state 96 between rule 13 and token LOGOP resolved as shift.
Conflict in state 96 between rule 13 and token SHIFTOP resolved as shift.
Conflict in state 96 between rule 13 and token MINUS resolved as shift.
Conflict in state 96 between rule 13 and token PLUS resolved as shift.
Conflict in state 96 between rule 13 and token MULOP resolved as shift.
Conflict in state 96 between rule 13 and token POWER resolved as shift.
Conflict in state 97 between rule 14 and token BOR resolved as shift.
Conflict in state 97 between rule 14 and token BAND resolved as shift.
Conflict in state 97 between rule 14 and token EQOP resolved as shift.
Conflict in state 97 between rule 14 and token ORDOP resolved as shift.
Conflict in state 97 between rule 14 and token LOGOP resolved as shift.
Conflict in state 97 between rule 14 and token SHIFTOP resolved as shift.
Conflict in state 97 between rule 14 and token MINUS resolved as shift.
Conflict in state 97 between rule 14 and token PLUS resolved as shift.
Conflict in state 97 between rule 14 and token MULOP resolved as shift.
Conflict in state 97 between rule 14 and token POWER resolved as shift.
Conflict in state 106 between rule 8 and token ELSE resolved as shift.

Grammar
rule 1    entirety -> program
rule 2    program ->		/* empty */
rule 3    program -> program global_decl TERMINATOR
rule 4    program -> program statement
rule 5    program -> program error LEXERROREOF
rule 6    expression -> if_expression
rule 7    expression -> op_expression
rule 8    if_expression -> IF expression THEN expression
rule 9    if_expression -> IF expression THEN expression ELSE expression
rule 10   op_expression -> un_expression
rule 11   op_expression -> bin_expression
rule 12   op_expression -> set_expression
rule 13   set_expression -> var SET op_expression
rule 14   set_expression -> var XSETOP op_expression
rule 15   un_expression -> rval
rule 16   un_expression -> UNARYOP un_expression
rule 17   un_expression -> PLUS un_expression
rule 18   un_expression -> MINUS un_expression
rule 19   bin_expression -> op_expression POWER op_expression
rule 20   bin_expression -> op_expression MULOP op_expression
rule 21   bin_expression -> op_expression PLUS op_expression
rule 22   bin_expression -> op_expression MINUS op_expression
rule 23   bin_expression -> op_expression SHIFTOP op_expression
rule 24   bin_expression -> op_expression ORDOP op_expression
rule 25   bin_expression -> op_expression EQOP op_expression
rule 26   bin_expression -> op_expression LOGOP op_expression
rule 27   bin_expression -> op_expression BAND op_expression
rule 28   bin_expression -> op_expression BOR op_expression
rule 29   var -> ident
rule 30   var -> rval OSQUARE expression CSQUARE
rule 31   rval -> VALUE
rule 32   rval -> list_literal
rule 33   rval -> AT ident
rule 34   rval -> OPAREN expression CPAREN
rule 35   rval -> block_literal
rule 36   rval -> call_rval
rule 37   rval -> var
rule 38   call_rval -> rval argument_list block_literal
rule 39   call_rval -> rval argument_list
rule 40   list_literal -> OSQUARE CSQUARE
rule 41   list_literal -> OSQUARE expressions CSQUARE
rule 42   argument_list -> OPAREN CPAREN
rule 43   argument_list -> OPAREN expressions CPAREN
rule 44   expressions -> expression
rule 45   expressions -> expressions COMMA expression
rule 46   block_literal -> OCURL statements CCURL
rule 47   statements ->		/* empty */
rule 48   statements -> statements statement
rule 49   statement -> expression TERMINATOR
rule 50   statement -> ident COLON expression TERMINATOR
rule 51   statement -> let_statement TERMINATOR
rule 52   statement -> error TERMINATOR
rule 53   let_statement -> LET decl_list
rule 54   let_statement -> LETFN funcdef_list
rule 55   global_decl -> GLOBAL decl_list
rule 56   global_decl -> CONST decl_list
rule 57   decl_list -> declaration
rule 58   decl_list -> decl_list COMMA declaration
rule 59   declaration -> ident opt_restriction SET expression
rule 60   declaration -> ident opt_restriction
rule 61   opt_restriction -> OPAREN expression CPAREN
rule 62   opt_restriction ->		/* empty */
rule 63   funcdef_list -> funcdef
rule 64   funcdef_list -> funcdef_list COMMA funcdef
rule 65   funcdef -> ident argument_list block_literal
rule 66   ident -> IDENT
rule 67   ident -> ident IDENT

Terminals, with rules where they appear

$ (-1)
error (256) 5 52
LEXERROR (258)
LEXERROREOF (259) 5
IDENT (260) 66 67
VALUE (261) 31
CONST (262) 56
ELSE (263) 9
GLOBAL (264) 55
IF (265) 8 9
LET (266) 53
LETFN (267) 54
THEN (268) 8 9
TERMINATOR (269) 3 49 50 51 52
AVOID (270)
OPAREN (271) 34 42 43 61
CPAREN (272) 34 42 43 61
OCURL (273) 46
CCURL (274) 46
COLON (275) 50
COMMA (276) 45 58 64
SET (277) 13 59
XSETOP (278) 14
BOR (279) 28
BAND (280) 27
EQOP (281) 25
ORDOP (282) 24
LOGOP (283) 26
SHIFTOP (284) 23
MINUS (285) 18 22
PLUS (286) 17 21
MULOP (287) 20
POWER (288) 19
AT (289) 33
UNARYOP (290) 16
OSQUARE (291) 30 40 41
CSQUARE (292) 30 40 41

Nonterminals, with rules where they appear

entirety (38)
    on left: 1
program (39)
    on left: 2 3 4 5, on right: 1 3 4 5
expression (40)
    on left: 6 7, on right: 8 9 30 34 44 45 49 50 59 61
if_expression (41)
    on left: 8 9, on right: 6
op_expression (42)
    on left: 10 11 12, on right: 7 13 14 19 20 21 22 23 24 25 26 27
    28
set_expression (43)
    on left: 13 14, on right: 12
un_expression (44)
    on left: 15 16 17 18, on right: 10 16 17 18
bin_expression (45)
    on left: 19 20 21 22 23 24 25 26 27 28, on right: 11
var (46)
    on left: 29 30, on right: 13 14 37
rval (47)
    on left: 31 32 33 34 35 36 37, on right: 15 30 38 39
call_rval (48)
    on left: 38 39, on right: 36
list_literal (49)
    on left: 40 41, on right: 32
argument_list (50)
    on left: 42 43, on right: 38 39 65
expressions (51)
    on left: 44 45, on right: 41 43 45
block_literal (52)
    on left: 46, on right: 35 38 65
statements (53)
    on left: 47 48, on right: 46 48
statement (54)
    on left: 49 50 51 52, on right: 4 48
let_statement (55)
    on left: 53 54, on right: 51
global_decl (56)
    on left: 55 56, on right: 3
decl_list (57)
    on left: 57 58, on right: 53 55 56 58
declaration (58)
    on left: 59 60, on right: 57 58
opt_restriction (59)
    on left: 61 62, on right: 59 60
funcdef_list (60)
    on left: 63 64, on right: 54 64
funcdef (61)
    on left: 65, on right: 63 64
ident (62)
    on left: 66 67, on right: 29 33 50 59 60 65 67


state 0

    $default	reduce using rule 2 (program)

    entirety	go to state 117
    program	go to state 1



state 1

    entirety  ->  program .   (rule 1)
    program  ->  program . global_decl TERMINATOR   (rule 3)
    program  ->  program . statement   (rule 4)
    program  ->  program . error LEXERROREOF   (rule 5)

    error	shift, and go to state 2
    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    CONST	shift, and go to state 5
    GLOBAL	shift, and go to state 6
    IF  	shift, and go to state 7
    LET 	shift, and go to state 8
    LETFN	shift, and go to state 9
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    $   	reduce using rule 1 (entirety)
    MULOP	reduce using rule 1 (entirety)

    expression	go to state 17
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    statement	go to state 28
    let_statement	go to state 29
    global_decl	go to state 30
    ident	go to state 31



state 2

    program  ->  program error . LEXERROREOF   (rule 5)
    statement  ->  error . TERMINATOR   (rule 52)

    LEXERROREOF	shift, and go to state 32
    TERMINATOR	shift, and go to state 33



state 3

    ident  ->  IDENT .   (rule 66)

    $default	reduce using rule 66 (ident)



state 4

    rval  ->  VALUE .   (rule 31)

    $default	reduce using rule 31 (rval)



state 5

    global_decl  ->  CONST . decl_list   (rule 56)

    IDENT	shift, and go to state 3

    decl_list	go to state 34
    declaration	go to state 35
    ident	go to state 36



state 6

    global_decl  ->  GLOBAL . decl_list   (rule 55)

    IDENT	shift, and go to state 3

    decl_list	go to state 37
    declaration	go to state 35
    ident	go to state 36



state 7

    if_expression  ->  IF . expression THEN expression   (rule 8)
    if_expression  ->  IF . expression THEN expression ELSE expression   (rule 9)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 38
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 8

    let_statement  ->  LET . decl_list   (rule 53)

    IDENT	shift, and go to state 3

    decl_list	go to state 40
    declaration	go to state 35
    ident	go to state 36



state 9

    let_statement  ->  LETFN . funcdef_list   (rule 54)

    IDENT	shift, and go to state 3

    funcdef_list	go to state 41
    funcdef	go to state 42
    ident	go to state 43



state 10

    rval  ->  OPAREN . expression CPAREN   (rule 34)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 44
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 11

    block_literal  ->  OCURL . statements CCURL   (rule 46)

    $default	reduce using rule 47 (statements)

    statements	go to state 45



state 12

    un_expression  ->  MINUS . un_expression   (rule 18)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    un_expression	go to state 46
    var 	go to state 47
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 13

    un_expression  ->  PLUS . un_expression   (rule 17)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    un_expression	go to state 48
    var 	go to state 47
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 14

    rval  ->  AT . ident   (rule 33)

    IDENT	shift, and go to state 3

    ident	go to state 49



state 15

    un_expression  ->  UNARYOP . un_expression   (rule 16)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    un_expression	go to state 50
    var 	go to state 47
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 16

    list_literal  ->  OSQUARE . CSQUARE   (rule 40)
    list_literal  ->  OSQUARE . expressions CSQUARE   (rule 41)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16
    CSQUARE	shift, and go to state 51

    expression	go to state 52
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    expressions	go to state 53
    block_literal	go to state 27
    ident	go to state 39



state 17

    statement  ->  expression . TERMINATOR   (rule 49)

    TERMINATOR	shift, and go to state 54



state 18

    expression  ->  if_expression .   (rule 6)

    $default	reduce using rule 6 (expression)



state 19

    expression  ->  op_expression .   (rule 7)
    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    BOR 	shift, and go to state 55
    BAND	shift, and go to state 56
    EQOP	shift, and go to state 57
    ORDOP	shift, and go to state 58
    LOGOP	shift, and go to state 59
    SHIFTOP	shift, and go to state 60
    MINUS	shift, and go to state 61
    PLUS	shift, and go to state 62
    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 7 (expression)



state 20

    op_expression  ->  set_expression .   (rule 12)

    $default	reduce using rule 12 (op_expression)



state 21

    op_expression  ->  un_expression .   (rule 10)

    $default	reduce using rule 10 (op_expression)



state 22

    op_expression  ->  bin_expression .   (rule 11)

    $default	reduce using rule 11 (op_expression)



state 23

    set_expression  ->  var . SET op_expression   (rule 13)
    set_expression  ->  var . XSETOP op_expression   (rule 14)
    rval  ->  var .   (rule 37)

    SET 	shift, and go to state 65
    XSETOP	shift, and go to state 66

    $default	reduce using rule 37 (rval)



state 24

    un_expression  ->  rval .   (rule 15)
    var  ->  rval . OSQUARE expression CSQUARE   (rule 30)
    call_rval  ->  rval . argument_list block_literal   (rule 38)
    call_rval  ->  rval . argument_list   (rule 39)

    OPAREN	shift, and go to state 67
    OSQUARE	shift, and go to state 68

    $default	reduce using rule 15 (un_expression)

    argument_list	go to state 69



state 25

    rval  ->  call_rval .   (rule 36)

    $default	reduce using rule 36 (rval)



state 26

    rval  ->  list_literal .   (rule 32)

    $default	reduce using rule 32 (rval)



state 27

    rval  ->  block_literal .   (rule 35)

    $default	reduce using rule 35 (rval)



state 28

    program  ->  program statement .   (rule 4)

    $default	reduce using rule 4 (program)



state 29

    statement  ->  let_statement . TERMINATOR   (rule 51)

    TERMINATOR	shift, and go to state 70



state 30

    program  ->  program global_decl . TERMINATOR   (rule 3)

    TERMINATOR	shift, and go to state 71



state 31

    var  ->  ident .   (rule 29)
    statement  ->  ident . COLON expression TERMINATOR   (rule 50)
    ident  ->  ident . IDENT   (rule 67)

    IDENT	shift, and go to state 72
    COLON	shift, and go to state 73

    $default	reduce using rule 29 (var)



state 32

    program  ->  program error LEXERROREOF .   (rule 5)

    $default	reduce using rule 5 (program)



state 33

    statement  ->  error TERMINATOR .   (rule 52)

    $default	reduce using rule 52 (statement)



state 34

    global_decl  ->  CONST decl_list .   (rule 56)
    decl_list  ->  decl_list . COMMA declaration   (rule 58)

    COMMA	shift, and go to state 74

    $default	reduce using rule 56 (global_decl)



state 35

    decl_list  ->  declaration .   (rule 57)

    $default	reduce using rule 57 (decl_list)



state 36

    declaration  ->  ident . opt_restriction SET expression   (rule 59)
    declaration  ->  ident . opt_restriction   (rule 60)
    ident  ->  ident . IDENT   (rule 67)

    IDENT	shift, and go to state 72
    OPAREN	shift, and go to state 75

    $default	reduce using rule 62 (opt_restriction)

    opt_restriction	go to state 76



state 37

    global_decl  ->  GLOBAL decl_list .   (rule 55)
    decl_list  ->  decl_list . COMMA declaration   (rule 58)

    COMMA	shift, and go to state 74

    $default	reduce using rule 55 (global_decl)



state 38

    if_expression  ->  IF expression . THEN expression   (rule 8)
    if_expression  ->  IF expression . THEN expression ELSE expression   (rule 9)

    THEN	shift, and go to state 77



state 39

    var  ->  ident .   (rule 29)
    ident  ->  ident . IDENT   (rule 67)

    IDENT	shift, and go to state 72

    $default	reduce using rule 29 (var)



state 40

    let_statement  ->  LET decl_list .   (rule 53)
    decl_list  ->  decl_list . COMMA declaration   (rule 58)

    COMMA	shift, and go to state 74

    $default	reduce using rule 53 (let_statement)



state 41

    let_statement  ->  LETFN funcdef_list .   (rule 54)
    funcdef_list  ->  funcdef_list . COMMA funcdef   (rule 64)

    COMMA	shift, and go to state 78

    $default	reduce using rule 54 (let_statement)



state 42

    funcdef_list  ->  funcdef .   (rule 63)

    $default	reduce using rule 63 (funcdef_list)



state 43

    funcdef  ->  ident . argument_list block_literal   (rule 65)
    ident  ->  ident . IDENT   (rule 67)

    IDENT	shift, and go to state 72
    OPAREN	shift, and go to state 67

    argument_list	go to state 79



state 44

    rval  ->  OPAREN expression . CPAREN   (rule 34)

    CPAREN	shift, and go to state 80



state 45

    block_literal  ->  OCURL statements . CCURL   (rule 46)
    statements  ->  statements . statement   (rule 48)

    error	shift, and go to state 81
    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    LET 	shift, and go to state 8
    LETFN	shift, and go to state 9
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    CCURL	shift, and go to state 82
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 17
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    statement	go to state 83
    let_statement	go to state 29
    ident	go to state 31



state 46

    un_expression  ->  MINUS un_expression .   (rule 18)

    $default	reduce using rule 18 (un_expression)



state 47

    rval  ->  var .   (rule 37)

    $default	reduce using rule 37 (rval)



state 48

    un_expression  ->  PLUS un_expression .   (rule 17)

    $default	reduce using rule 17 (un_expression)



state 49

    rval  ->  AT ident .   (rule 33)
    ident  ->  ident . IDENT   (rule 67)

    IDENT	shift, and go to state 72

    $default	reduce using rule 33 (rval)



state 50

    un_expression  ->  UNARYOP un_expression .   (rule 16)

    $default	reduce using rule 16 (un_expression)



state 51

    list_literal  ->  OSQUARE CSQUARE .   (rule 40)

    $default	reduce using rule 40 (list_literal)



state 52

    expressions  ->  expression .   (rule 44)

    $default	reduce using rule 44 (expressions)



state 53

    list_literal  ->  OSQUARE expressions . CSQUARE   (rule 41)
    expressions  ->  expressions . COMMA expression   (rule 45)

    COMMA	shift, and go to state 84
    CSQUARE	shift, and go to state 85



state 54

    statement  ->  expression TERMINATOR .   (rule 49)

    $default	reduce using rule 49 (statement)



state 55

    bin_expression  ->  op_expression BOR . op_expression   (rule 28)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 86
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 56

    bin_expression  ->  op_expression BAND . op_expression   (rule 27)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 87
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 57

    bin_expression  ->  op_expression EQOP . op_expression   (rule 25)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 88
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 58

    bin_expression  ->  op_expression ORDOP . op_expression   (rule 24)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 89
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 59

    bin_expression  ->  op_expression LOGOP . op_expression   (rule 26)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 90
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 60

    bin_expression  ->  op_expression SHIFTOP . op_expression   (rule 23)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 91
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 61

    bin_expression  ->  op_expression MINUS . op_expression   (rule 22)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 92
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 62

    bin_expression  ->  op_expression PLUS . op_expression   (rule 21)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 93
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 63

    bin_expression  ->  op_expression MULOP . op_expression   (rule 20)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 94
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 64

    bin_expression  ->  op_expression POWER . op_expression   (rule 19)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 95
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 65

    set_expression  ->  var SET . op_expression   (rule 13)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 96
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 66

    set_expression  ->  var XSETOP . op_expression   (rule 14)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    op_expression	go to state 97
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 67

    argument_list  ->  OPAREN . CPAREN   (rule 42)
    argument_list  ->  OPAREN . expressions CPAREN   (rule 43)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    CPAREN	shift, and go to state 98
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 52
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    expressions	go to state 99
    block_literal	go to state 27
    ident	go to state 39



state 68

    var  ->  rval OSQUARE . expression CSQUARE   (rule 30)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 100
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 69

    call_rval  ->  rval argument_list . block_literal   (rule 38)
    call_rval  ->  rval argument_list .   (rule 39)

    OCURL	shift, and go to state 11

    $default	reduce using rule 39 (call_rval)

    block_literal	go to state 101



state 70

    statement  ->  let_statement TERMINATOR .   (rule 51)

    $default	reduce using rule 51 (statement)



state 71

    program  ->  program global_decl TERMINATOR .   (rule 3)

    $default	reduce using rule 3 (program)



state 72

    ident  ->  ident IDENT .   (rule 67)

    $default	reduce using rule 67 (ident)



state 73

    statement  ->  ident COLON . expression TERMINATOR   (rule 50)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 102
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 74

    decl_list  ->  decl_list COMMA . declaration   (rule 58)

    IDENT	shift, and go to state 3

    declaration	go to state 103
    ident	go to state 36



state 75

    opt_restriction  ->  OPAREN . expression CPAREN   (rule 61)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 104
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 76

    declaration  ->  ident opt_restriction . SET expression   (rule 59)
    declaration  ->  ident opt_restriction .   (rule 60)

    SET 	shift, and go to state 105

    $default	reduce using rule 60 (declaration)



state 77

    if_expression  ->  IF expression THEN . expression   (rule 8)
    if_expression  ->  IF expression THEN . expression ELSE expression   (rule 9)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 106
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 78

    funcdef_list  ->  funcdef_list COMMA . funcdef   (rule 64)

    IDENT	shift, and go to state 3

    funcdef	go to state 107
    ident	go to state 43



state 79

    funcdef  ->  ident argument_list . block_literal   (rule 65)

    OCURL	shift, and go to state 11

    block_literal	go to state 108



state 80

    rval  ->  OPAREN expression CPAREN .   (rule 34)

    $default	reduce using rule 34 (rval)



state 81

    statement  ->  error . TERMINATOR   (rule 52)

    TERMINATOR	shift, and go to state 33



state 82

    block_literal  ->  OCURL statements CCURL .   (rule 46)

    $default	reduce using rule 46 (block_literal)



state 83

    statements  ->  statements statement .   (rule 48)

    $default	reduce using rule 48 (statements)



state 84

    expressions  ->  expressions COMMA . expression   (rule 45)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 109
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 85

    list_literal  ->  OSQUARE expressions CSQUARE .   (rule 41)

    $default	reduce using rule 41 (list_literal)



state 86

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)
    bin_expression  ->  op_expression BOR op_expression .   (rule 28)

    BAND	shift, and go to state 56
    EQOP	shift, and go to state 57
    ORDOP	shift, and go to state 58
    LOGOP	shift, and go to state 59
    SHIFTOP	shift, and go to state 60
    MINUS	shift, and go to state 61
    PLUS	shift, and go to state 62
    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 28 (bin_expression)



state 87

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression BAND op_expression .   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    EQOP	shift, and go to state 57
    ORDOP	shift, and go to state 58
    LOGOP	shift, and go to state 59
    SHIFTOP	shift, and go to state 60
    MINUS	shift, and go to state 61
    PLUS	shift, and go to state 62
    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 27 (bin_expression)



state 88

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression EQOP op_expression .   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    ORDOP	shift, and go to state 58
    LOGOP	shift, and go to state 59
    SHIFTOP	shift, and go to state 60
    MINUS	shift, and go to state 61
    PLUS	shift, and go to state 62
    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 25 (bin_expression)



state 89

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression ORDOP op_expression .   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    LOGOP	shift, and go to state 59
    SHIFTOP	shift, and go to state 60
    MINUS	shift, and go to state 61
    PLUS	shift, and go to state 62
    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 24 (bin_expression)



state 90

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression LOGOP op_expression .   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    SHIFTOP	shift, and go to state 60
    MINUS	shift, and go to state 61
    PLUS	shift, and go to state 62
    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 26 (bin_expression)



state 91

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression SHIFTOP op_expression .   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    MINUS	shift, and go to state 61
    PLUS	shift, and go to state 62
    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 23 (bin_expression)



state 92

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression MINUS op_expression .   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 22 (bin_expression)



state 93

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression PLUS op_expression .   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 21 (bin_expression)



state 94

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression MULOP op_expression .   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    POWER	shift, and go to state 64

    $default	reduce using rule 20 (bin_expression)



state 95

    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression POWER op_expression .   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)


    $default	reduce using rule 19 (bin_expression)



state 96

    set_expression  ->  var SET op_expression .   (rule 13)
    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    BOR 	shift, and go to state 55
    BAND	shift, and go to state 56
    EQOP	shift, and go to state 57
    ORDOP	shift, and go to state 58
    LOGOP	shift, and go to state 59
    SHIFTOP	shift, and go to state 60
    MINUS	shift, and go to state 61
    PLUS	shift, and go to state 62
    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 13 (set_expression)



state 97

    set_expression  ->  var XSETOP op_expression .   (rule 14)
    bin_expression  ->  op_expression . POWER op_expression   (rule 19)
    bin_expression  ->  op_expression . MULOP op_expression   (rule 20)
    bin_expression  ->  op_expression . PLUS op_expression   (rule 21)
    bin_expression  ->  op_expression . MINUS op_expression   (rule 22)
    bin_expression  ->  op_expression . SHIFTOP op_expression   (rule 23)
    bin_expression  ->  op_expression . ORDOP op_expression   (rule 24)
    bin_expression  ->  op_expression . EQOP op_expression   (rule 25)
    bin_expression  ->  op_expression . LOGOP op_expression   (rule 26)
    bin_expression  ->  op_expression . BAND op_expression   (rule 27)
    bin_expression  ->  op_expression . BOR op_expression   (rule 28)

    BOR 	shift, and go to state 55
    BAND	shift, and go to state 56
    EQOP	shift, and go to state 57
    ORDOP	shift, and go to state 58
    LOGOP	shift, and go to state 59
    SHIFTOP	shift, and go to state 60
    MINUS	shift, and go to state 61
    PLUS	shift, and go to state 62
    MULOP	shift, and go to state 63
    POWER	shift, and go to state 64

    $default	reduce using rule 14 (set_expression)



state 98

    argument_list  ->  OPAREN CPAREN .   (rule 42)

    $default	reduce using rule 42 (argument_list)



state 99

    argument_list  ->  OPAREN expressions . CPAREN   (rule 43)
    expressions  ->  expressions . COMMA expression   (rule 45)

    CPAREN	shift, and go to state 110
    COMMA	shift, and go to state 84



state 100

    var  ->  rval OSQUARE expression . CSQUARE   (rule 30)

    CSQUARE	shift, and go to state 111



state 101

    call_rval  ->  rval argument_list block_literal .   (rule 38)

    $default	reduce using rule 38 (call_rval)



state 102

    statement  ->  ident COLON expression . TERMINATOR   (rule 50)

    TERMINATOR	shift, and go to state 112



state 103

    decl_list  ->  decl_list COMMA declaration .   (rule 58)

    $default	reduce using rule 58 (decl_list)



state 104

    opt_restriction  ->  OPAREN expression . CPAREN   (rule 61)

    CPAREN	shift, and go to state 113



state 105

    declaration  ->  ident opt_restriction SET . expression   (rule 59)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 114
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 106

    if_expression  ->  IF expression THEN expression .   (rule 8)
    if_expression  ->  IF expression THEN expression . ELSE expression   (rule 9)

    ELSE	shift, and go to state 115

    $default	reduce using rule 8 (if_expression)



state 107

    funcdef_list  ->  funcdef_list COMMA funcdef .   (rule 64)

    $default	reduce using rule 64 (funcdef_list)



state 108

    funcdef  ->  ident argument_list block_literal .   (rule 65)

    $default	reduce using rule 65 (funcdef)



state 109

    expressions  ->  expressions COMMA expression .   (rule 45)

    $default	reduce using rule 45 (expressions)



state 110

    argument_list  ->  OPAREN expressions CPAREN .   (rule 43)

    $default	reduce using rule 43 (argument_list)



state 111

    var  ->  rval OSQUARE expression CSQUARE .   (rule 30)

    $default	reduce using rule 30 (var)



state 112

    statement  ->  ident COLON expression TERMINATOR .   (rule 50)

    $default	reduce using rule 50 (statement)



state 113

    opt_restriction  ->  OPAREN expression CPAREN .   (rule 61)

    $default	reduce using rule 61 (opt_restriction)



state 114

    declaration  ->  ident opt_restriction SET expression .   (rule 59)

    $default	reduce using rule 59 (declaration)



state 115

    if_expression  ->  IF expression THEN expression ELSE . expression   (rule 9)

    IDENT	shift, and go to state 3
    VALUE	shift, and go to state 4
    IF  	shift, and go to state 7
    OPAREN	shift, and go to state 10
    OCURL	shift, and go to state 11
    MINUS	shift, and go to state 12
    PLUS	shift, and go to state 13
    AT  	shift, and go to state 14
    UNARYOP	shift, and go to state 15
    OSQUARE	shift, and go to state 16

    expression	go to state 116
    if_expression	go to state 18
    op_expression	go to state 19
    set_expression	go to state 20
    un_expression	go to state 21
    bin_expression	go to state 22
    var 	go to state 23
    rval	go to state 24
    call_rval	go to state 25
    list_literal	go to state 26
    block_literal	go to state 27
    ident	go to state 39



state 116

    if_expression  ->  IF expression THEN expression ELSE expression .   (rule 9)

    $default	reduce using rule 9 (if_expression)



state 117

    $   	go to state 118



state 118

    $   	go to state 119



state 119

    $default	accept
