http://www.google.com/search?q=cache:www.smartelectronix.com/musicdsp/analysis.htm



  main
  archive
           synthesis
            analysis
             filters
             effects
             other
  links
  submit




                   Fast in-place Walsh-Hadamard Transform

                     Name: Fast in-place Walsh-Hadamard Transform
                     Type: Wavelet transform
                     References: posted by Timo H Tossavainen
                     Notes: IIRC, They're also called walsh-hadamard transforms.
                     Basically like Fourier, but the basis functions are squarewaves with different sequencies.
                     I did this for a transform data compression study a while back.
                     Here's some code to do a walsh hadamard transform on long ints in-place (you need to divide by n to get transform) the order is bit-reversed at output, IIRC.
                     The inverse transform is the same as the forward transform (expects bit-reversed input). i.e. x = 1/n * FWHT(FWHT(x)) (x is a vector)

                  void inline wht_bfly (long& a, long& b)
                  {
                          long tmp = a;
                          a += b;
                          b = tmp - b;
                  }

                  // just a integer log2
                  int inline l2 (long x)
                  {
                          int l2;
                          for (l2 = 0; x > 0; x >>=1)
                          {
                                  ++ l2;
                          }

                          return (l2);
                  }

                  ////////////////////////////////////////////
                  // Fast in-place Walsh-Hadamard Transform //
                  ////////////////////////////////////////////

                  void FWHT (std::vector& data)
                  {
                    const int log2 = l2 (data.size()) - 1;
                    for (int i = 0; i < log2; ++i)
                    {
                      for (int j = 0; j < (1 << log2); j += 1 << (i+1))
                      {
                         for (int k = 0; k < (1<<i); ++k)
                         {
                             wht_bfly (data [j + k], data [j + k + (1<<i)]);
                         }
                      }
                    }
                  }

                   Simple Peak Follower

                     Name: Simple Peak Follower
                     Type: amplitude analysis
                     References: Posted by Phil Burk
                     Notes:This simple peak follower will give track the peaks of a signal. It will rise rapidly when the input is rising, and then decay exponentially when the input drops. It
                     can be used to drive VU meters, or used in an automatic gain control circuit. 

                  // halfLife = time in seconds for output to decay to half value after an impulse

                  static float output = 0.0;

                  float scalar = pow( 0.5, 1.0/(halfLife * sampleRate)));

                  if( input < 0.0 )
                    input = -input;  /* Absolute value. */

                  if ( input >= output )
                  {
                     /* When we hit a peak, ride the peak to the top. */
                     output = input;
                  }
                  else
                  {
                     /* Exponential decay of output when signal is low. */
                     output = output * scalar;
                     /*
                     ** When current gets close to 0.0, set current to 0.0 to prevent FP underflow
                     ** which can cause a severe performance degradation due to a flood
                     ** of interrupts.
                     */
                     if( output < VERY_SMALL_FLOAT ) output = 0.0;
                  }
