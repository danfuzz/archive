http://www.google.com/search?q=cache:www.smartelectronix.com/musicdsp/synthesis.htm





                   alias-free waveform generation with analog filtering

                     Name: alias-free waveform generation with analog filtering
                     Type: waveform generation
                     References: Posted by Magnus Jonsson
                     Notes: see text

                     Download: synthesis001.txt 

                   Square Waves

                     Name: Square Waves
                     Type: waveform generation
                     References: Posted by Sean Costello
                     Notes: 

                     One way to do a square wave:

                     You need two buzz generators (see Dodge & Jerse, or the Csound source code, for implementation details). One of the buzz generators runs at the desired square
                     wave frequency, while the second buzz generator is exactly one octave above this pitch. Subtract the higher octave buzz generator's output from the lower buzz
                     generator's output - the result should be a signal with all odd harmonics, all at equal amplitude. Filter the resultant signal (maybe integrate it). Voila, a bandlimited
                     square wave! Well, I think it should work...

                     The one question I have with the above technique is whether it produces a waveform that truly resembles a square wave in the time domain. Even if the number of
                     harmonics, and the relative ratio of the harmonics, is identical to an "ideal" bandwidth-limited square wave, it may have an entirely different waveshape. No big deal,
                     unless the signal is processed by a nonlinearity, in which case the results of the nonlinear processing will be far different than the processing of a waveform that has
                     a similar shape to a square wave. 

                   Pulsewidth modulation

                     Name: Pulsewidth modulation
                     Type: waveform generation
                     References: Steffan Diedrichsen
                     Notes:
                     Take an upramping sawtooth and its inverse, a downramping sawtooth.
                     Adding these two waves with a well defined delay between 0 and period (1/f)
                     results in a square wave with a duty cycle ranging from 0 to 100%.

                   fast sine calculation

                     Name: fast sine calculation
                     Type: 
                     References: James McCartney in Computer Music Journal (when???), allso the Julius O. Smith paper
                     Notes: (posted by Niels Gorisse)
                     if you change the frequency, the amplitude rises (pitch lower) or lowers (pitch rise) a LOT
                     I fixed the first problem by thinking about what actually goes wrong.
                     The answer was to recalculate the phase for that frequency and the last value, and then continue normally.

                  Variables:
                  ip = phase of the first output sample in radians
                  w = freq*pi / samplerate
                  b1 = 2.0 * cos(w)

                  Init:
                  y1=sin(ip-w)
                  y2=sin(ip-2*w)

                  Loop:
                  y0 = b1*y1 - y2
                  y2 = y1
                  y1 = y0

                  output is in y0 (y0 = sin(ip + n*freq*pi / samplerate), n= 0, 1, 2, ... I *think*)

                  Later note by James McCartney:
                  if you unroll such a loop by 3 you can even eliminate the assigns!!

                  y0 = b1*y1 - y2
                  y2 = b1*y0 - y1
                  y1 = b1*y2 - y0

                   fast sine and cosine calculation

                     Name: fast sine and cosine calculation
                     Type: 
                     References: John Lazzaro's SAOL code (most probably not JL who invented it) and Smith, J. O. and Cook, P., "The Second Order Digital Waveguide Oscillator"
                     (http://www-ccrma.stanford.edu/~jos)
                     Notes: Posted by Eric Scheirer, rewritten by Bram de Jong in pseudo-code

                  init:
                  float hertz = 440.f; //the freq you want
                  float samplerate = 44100.f; //the samplingrate
                  float a = 2.f*(float)sin(3.14159265358979*hertz/samplerate);
                  float s[2];

                  s[0] = 0.5f;
                  s[1] = 0.f;

                  loop:
                  s[0] = s[0] - a*s[1];
                  s[1] = s[1] + a*s[0];
                  output_sine = s[0];
                  output_cosine = s[1]

                   weird synthesis

                     Name: weird synthesis
                     Type: waveform generation!
                     References: invented by Andy Mucho (Mooocho!)
                     Notes: (quoted from Andy's mail...)
                     What I've done in a soft-synth I've been working on is used what I've termed Fooglers, no reason, just liked the name :) Anyway all I've done is use a *VERY* short
                     delay line of 256 samples and then use 2 controllable taps into the delay with High Frequency Damping, and a feedback parameter.

                     Using a tiny fixed delay size of approx. 4.8ms (really 256 samples/1k memory with floats) means this costs, in terms of cpu consumption practically nothing, and the
                     filter is a real simple 1 pole low-pass filter. Maybe not DSP'litically correct but all I wanted was to avoid the high frequencies trashing the delay line when high
                     feedbacks (99%->99.9%) are used (when the fun starts ;).

                     I've been getting some really sexy sounds out of this idea, and of course you can have the delay line tuneable if you choose to use fractional taps, but I'm happy with it
                     as it is.. 1 nice simple, yet powerful addition to the base oscillators.

                     In reality you don't need 2 taps, but I found that using 2 added that extra element of funkiness...

                   waveform generation method

                     Name: waveform generation method
                     Type: 
                     References: Paul Kellett
                     Notes: (Quoted from Paul's mail)
                     Below is another waveform generation method based on a train of sinc functions (actually an alternating loop along a sinc between t=0 and t=period/2).

                     The code integrates the pulse train with a dc offset to get a sawtooth, but other shapes can be made in the usual ways... Note that 'dc' and 'leak' may need to be
                     adjusted for very high or low frequencies.

                     I don't know how original it is (I ought to read more) but it is of usable quality, particularly at low frequencies. There's some scope for optimisation by using a table for
                     sinc, or maybe a a truncated/windowed sinc?

                     I think it should be possible to minimise the aliasing by fine tuning 'dp' to slightly less than 1 so the sincs join together neatly, but I haven't found the best way to do
                     it. Any comments gratefully received.

                  float p=0.0f;      //current position
                  float dp=1.0f;     //change in postion per sample
                  float pmax;        //maximum position
                  float x;           //position in sinc function
                  float leak=0.995f; //leaky integrator
                  float dc;          //dc offset
                  float saw;         //output


                  //set frequency...

                    pmax = 0.5f * getSampleRate() / freqHz;
                    dc = -0.498f/pmax;


                  //for each sample...

                    p += dp;
                    if(p < 0.0f)
                    {
                      p = -p;
                      dp = -dp;
                    }
                    else if(p > pmax)
                    {
                      p = pmax + pmax - p;
                      dp = -dp;
                    }

                    x= pi * p;
                    if(x < 0.00001f)
                       x=0.00001f; //don't divide by 0

                    saw = leak*saw + dc + (float)sin(x)/(x);

                   sine calculation

                     Name: fast sine calculation
                     Type: 
                     References: Phil Burk (his "I'm leaving music.dsp" post :( )
                     Notes: (rewritten by bram de jong)
                     Code from JSyn for a sine wave generator based on a Taylor Expansion. It is not as efficient as the filter methods, but it has linear frequency control and is,
                     therefore, suitable for FM or other time varying applications where accurate frequency is needed. The sine generated is accurate to at least 16 bits. 

                  for(i=0; i < nSamples ; i++)
                  {
                    //Generate sawtooth phasor to provide phase for sine generation
                    IncrementWrapPhase(phase, freqPtr[i]);
                    //Wrap phase back into region where results are more accurate

                    if(phase > 0.5)
                      yp = 1.0 - phase;
                    else
                    {
                      if(phase < -0.5)
                         yp = -1.0 - phase;
                      else
                          yp = phase;
                    }

                    x = yp * PI;
                    x2 = x*x;

                    //Taylor expansion out to x**9/9! factored  into multiply-adds
                    fastsin = x*(x2*(x2*(x2*(x2*(1.0/362880.0)
                              - (1.0/5040.0))
                              + (1.0/120.0))
                              - (1.0/6.0))
                              + 1.0);

                    outPtr[i] = fastsin * amplPtr[i];
                  }

                   inverted parabolic envelope

                     Name: inverted parabolic envelope
                     Type: fast envelope generation
                     References: James McCartney
                     Notes: 

                  dur = duration in samples
                  midlevel = amplitude at midpoint
                  beglevel = beginning and ending level (typically zero)

                  amp = midlevel - beglevel;

                  rdur = 1.0 / dur;
                  rdur2 = rdur * rdur;

                  level = beglevel;
                  slope = 4.0 * amp * (rdur - rdur2);
                  curve = -8.0 * amp * rdur2;

                  ...

                  for (i=0; i<dur; ++i) {
                          level += slope;
                          slope += curve;
                  }

                   Cubic polynomial envelopes

                     Name: Cubic polynomial envelopes
                     Type: fast envelope generation
                     References: Posted by Andy Mucho
                     Notes:
                     This function runs from:
                     startlevel at Time=0
                     midlevel at Time/2
                     endlevel at Time
                     At moments of extreme change over small time, the function can generate out
                     of range (of the 3 input level) numbers, but isn't really a problem in
                     actual use with real numbers, and sensible/real times..

                  time = 32
                  startlevel = 0
                  midlevel = 100
                  endlevel = 120
                  k = startlevel + endlevel - (midlevel * 2)
                  r = startlevel
                  s = (endlevel - startlevel - (2 * k)) / time
                  t = (2 * k) / (time * time)
                  bigr = r
                  bigs = s + t
                  bigt = 2 * t

                  for(int i=0;i



                   (Allmost) Ready-to-use oscillators


                     Name: (Allmost) Ready-to-use oscillators

                     Type: waveform geberation

                     References: Ross Bencina, Olli Niemitalo, (Bram de Jong)

                     Notes:

                     Ross Bencina 

                      -> original source code poster

                     Olli Niemitalo 

                      -> UpdateWithCubicInterpolation

                     //Bram de Jong 

                      -> rewritten/cleaned up + speed up

                      by adding extra arrays with precomputed stuff and other things

                      added a #define for FM



                  //uncomment if you need an FM oscillator!!
                  //define FM_OSCILLATOR

                  /*
                  members are:

                  float phase;
                  int TableSize;
                  float sampleRate;

                  float *table, dtable0, dtable1, dtable2, dtable3;

                  ->these should be filled as folows... (remember to wrap around!!!)
                  table[i] = the wave-shape
                  dtable0[i] = table[i+1] - table[i];
                  dtable1[i] = (3.f*(table[i]-table[i+1])-table[i-1]+table[i+2])/2.f
                  dtable2[i] = 2.f*table[i+1]+table[i-1]-(5.f*table[i]+table[i+2])/2.f
                  dtable3[i] = (table[i+1]-table[i-1])/2.f
                  */

                  float Oscillator::UpdateWithoutInterpolation(float frequency)
                  {
                          int i = (int) phase;

                          phase += (sampleRate/(float)TableSize)/frequency;

                          if(phase >= (float)TableSize)
                                  phase -= (float)TableSize;

                  #ifdef FM_OSCILLATOR
                          if(phase < 0.f)
                                  phase += (float)TableSize;
                  #endif

                          return table[i] ;
                  }

                  float Oscillator::UpdateWithLinearInterpolation(float frequency)
                  {
                          int i = (int) phase;
                          float alpha = phase - (float) i;

                          phase += (sampleRate/(float)TableSize)/frequency;

                          if(phase >= (float)TableSize)
                                  phase -= (float)TableSize;

                  #ifdef FM_OSCILLATOR
                          if(phase < 0.f)
                                  phase += (float)TableSize;
                  #endif

                          /*
                          dtable0[i] = table[i+1] - table[i]; //remember to wrap around!!!
                          */

                          return table[i] + dtable0[i]*alpha;
                  }

                  float Oscillator::UpdateWithCubicInterpolation( float frequency )
                  {
                          int i = (int) phase;
                          float alpha = phase - (float) i;

                          phase += (sampleRate/(float)TableSize)/frequency;

                          if(phase >= (float)TableSize)
                                  phase -= (float)TableSize;

                  #ifdef FM_OSCILLATOR
                          if(phase < 0.f)
                                  phase += (float)TableSize;
                  #endif

                          /* //remember to wrap around!!!
                          dtable1[i] = (3.f*(table[i]-table[i+1])-table[i-1]+table[i+2])/2.f
                          dtable2[i] = 2.f*table[i+1]+table[i-1]-(5.f*table[i]+table[i+2])/2.f
                          dtable3[i] = (table[i+1]-table[i-1])/2.f
                          */

                          return ((dtable1[i]*alpha + dtable2[i])*alpha + dtable3[i])*alpha+table[i];
                  }