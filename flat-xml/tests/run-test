#!/bin/bash

#
# Runs one or more tests by name.
#

#
# Directory and program name detection
#

# Preserve the original working dir as origDir.
origDir="${PWD}"

# Set progName to the program name, progDir to its directory, and baseDir
# to progDir's directory. Follows symlinks.
prog="$0"
while [[ -h ${prog} ]]; do
    [[ "$(/bin/ls -ld "${prog}")" =~ .*' -> '(.*)$ ]]
    newProg="${BASH_REMATCH[1]}"
    if [[ ${newProg} =~ ^/ ]]; then
        prog="${newProg}"
    else
        prog="$(dirname "${prog}")/${newProg}"
    fi
done
progName="$(basename "${prog}")"
progDir="$(dirname "${prog}")"
cd "${progDir}"
progDir="${PWD}"
cd ..
baseDir="${PWD}"
cd "${origDir}"
unset prog
unset newProg


#
# Argument parsing
#

# Whether to update/replace the expected output with the actual output.
# Useful when developing tests.
updateExpected='no'

# Whether to print the raw output to the console.
printOutput='no'

while [[ $1 != '' ]]; do
    opt="$1"
    if [[ ${opt} == '--' ]]; then
        shift
        break
    elif [[ ${opt} == '--help' ]]; then
        echo "${progName} [--update] [--print] <test-name> [<test-name> ...]"
        exit
    elif [[ ${opt} == '--print' ]]; then
        printOutput='yes'
    elif [[ ${opt} == '--update' ]]; then
        updateExpected='yes'
    elif [[ ${opt} =~ ^- ]]; then
        echo "unknown option: ${opt}" 1>&2
        exit 1
    else
        break
    fi
    shift
done
unset opt

if [[ $# == 0 ]]; then
    echo 'Missing test name(s).' 1>&2
    exit 1
fi


#
# Temporary directory setup
#

tmpDir="$(mktemp -d "${TMPDIR:-/tmp/}${progName}-XXXXX")"
if [[ $? != 0 ]]; then
    exit 1
fi

function tmpCleanup {
    cd /
    rm -rf "${tmpDir}"
}

trap 'tmpCleanup' EXIT TERM


#
# Helper functions
#

# Fixes a test name if necessary, or complains if it can't be fixed.
function fixName {
    local name="$1"
    local -a tests=($(find "${progDir}" -depth 1 -name "${name}"'*'))

    if [[ ${#tests[@]} == 0 ]]; then
        echo "No matching test found for: ${name}" 1>&2
        exit 1
    elif [[ ${#tests[@]} != 1 ]]; then
        echo "Multiple matching tests found for: ${name}" 1>&2
        exit 1
    fi

    local dir="${tests[0]}"

    if [[ ! -r ${dir}/run ]]; then
        echo "Missing run script for: ${name}" 1>&2
    fi

    if [[ ! -r ${dir}/expected.txt ]]; then
        echo "Missing expected output for: ${name}" 1>&2
    fi

    if [[ ! -r ${dir}/README.md ]]; then
        echo "Missing test description for: ${name}" 1>&2
    fi

    echo "${dir}"
}

# Runs a single test by directory.
function runTest {
    local dir="$1"
    local name="$(basename "${dir}")"
    local testDir="${tmpDir}/test"

    echo ''
    echo '############################################################'
    echo '###'
    echo "### Running test: ${name}"
    echo '###'

    rm -rf "${testDir}"
    cp -r "${dir}" "${testDir}"
    cd "${testDir}"
    chmod 755 run

    ./run >& actual.txt &
    local procId="$!"
    local i
    for (( i = 25; i > 0; i-- )); do
        if ! ps -p "${procId}" >& /dev/null; then
            break
        fi
    done

    if [[ ${printOutput} == 'yes' ]]; then
        echo ''
        echo '### test output'
        cat actual.txt

        if [[ "$(tail -c 1 actual.txt)" != '' ]]; then
            echo
            echo '### (no newline at end)'
        else
            echo '###'
        fi
    fi

    if [[ ${i} == 0 ]]; then
        echo ''
        echo 'ERROR: Test hung!'
        kill -9 "${procId}"
        return 1
    elif cmp expected.txt actual.txt >& /dev/null; then
        return 0
    elif [[ ${updateExpected} == 'yes' ]]; then
        echo ''
        echo 'Updating expected output.'
        cp actual.txt "${dir}/expected.txt"
        return 0
    else
        echo ''
        cat README.md
        echo ''
        echo 'ERROR: Expected and actual output differ!'
        echo ''
        echo '### diff -u expected.txt actual.txt'
        diff -u expected.txt actual.txt
        echo '###'
        return 1
    fi
}


#
# Main script
#

# This makes the tools to be tested be part of the path.
PATH="${baseDir}/bin:${PATH}"

declare -a errors

for name in "$@"; do
    name="$(fixName "${name}")"
    if [[ $? != 0 ]]; then
        exit 1
    fi
    runTest "${name}"
    if [[ $? != 0 ]]; then
        errors[${#errors[@]}]="$(basename "${name}")"
    fi
done

errorCount="${#errors[@]}"
if [[ ${errorCount} == '0' ]]; then
    if [[ $# != 1 ]]; then
        echo ''
        echo 'Huzzah! All tests passed!'
    fi
    exit
fi

echo ''
echo 'The following tests failed:'

for (( i = 0; i < errorCount; i++ )); do
    echo "    ${errors[${i}]}"
done

exit 1
